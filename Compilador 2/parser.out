Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BOOL_VALUE
    COMMENT
    MULTILINE_COMMENT

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM LBRACE declarations statements RBRACE
Rule 2     declarations -> declarations declaration
Rule 3     declarations -> empty
Rule 4     declaration -> INT var_list SEMICOLON
Rule 5     declaration -> FLOAT var_list SEMICOLON
Rule 6     declaration -> BOOL var_list SEMICOLON
Rule 7     var_list -> var_list COMMA IDENTIFIER
Rule 8     var_list -> IDENTIFIER
Rule 9     statements -> statements statement
Rule 10    statements -> empty
Rule 11    statement -> assignment
Rule 12    statement -> if_statement
Rule 13    statement -> write_statement
Rule 14    statement -> do_statement
Rule 15    statement -> while_statement
Rule 16    assignment -> IDENTIFIER ASSIGN expression SEMICOLON
Rule 17    if_statement -> IF LPAREN condition RPAREN THEN LBRACE statements RBRACE ELSE LBRACE statements RBRACE FI
Rule 18    if_statement -> IF LPAREN condition RPAREN THEN LBRACE statements RBRACE FI
Rule 19    write_statement -> WRITE expression SEMICOLON
Rule 20    do_statement -> DO LBRACE statements RBRACE UNTIL LPAREN condition RPAREN SEMICOLON
Rule 21    while_statement -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE
Rule 22    expression -> expression PLUS term
Rule 23    expression -> expression MINUS term
Rule 24    expression -> term
Rule 25    term -> term TIMES factor
Rule 26    term -> term DIVIDE factor
Rule 27    term -> factor
Rule 28    factor -> LPAREN expression RPAREN
Rule 29    factor -> NUMBER
Rule 30    factor -> FLOAT_NUMBER
Rule 31    factor -> IDENTIFIER
Rule 32    condition -> expression EQUALS expression
Rule 33    condition -> expression NOTEQUALS expression
Rule 34    condition -> expression LESS expression
Rule 35    condition -> expression LESSEQUAL expression
Rule 36    condition -> expression GREATER expression
Rule 37    condition -> expression GREATEREQUAL expression
Rule 38    condition -> expression AND expression
Rule 39    condition -> expression OR expression
Rule 40    empty -> <empty>

Terminals, with rules where they appear

AND                  : 38
ASSIGN               : 16
BOOL                 : 6
BOOL_VALUE           : 
COMMA                : 7
COMMENT              : 
DIVIDE               : 26
DO                   : 20
ELSE                 : 17
EQUALS               : 32
FI                   : 17 18
FLOAT                : 5
FLOAT_NUMBER         : 30
GREATER              : 36
GREATEREQUAL         : 37
IDENTIFIER           : 7 8 16 31
IF                   : 17 18
INT                  : 4
LBRACE               : 1 17 17 18 20 21
LESS                 : 34
LESSEQUAL            : 35
LPAREN               : 17 18 20 21 28
MINUS                : 23
MULTILINE_COMMENT    : 
NOTEQUALS            : 33
NUMBER               : 29
OR                   : 39
PLUS                 : 22
PROGRAM              : 1
RBRACE               : 1 17 17 18 20 21
RPAREN               : 17 18 20 21 28
SEMICOLON            : 4 5 6 16 19 20
THEN                 : 17 18
TIMES                : 25
UNTIL                : 20
WHILE                : 21
WRITE                : 19
error                : 

Nonterminals, with rules where they appear

assignment           : 11
condition            : 17 18 20 21
declaration          : 2
declarations         : 1 2
do_statement         : 14
empty                : 3 10
expression           : 16 19 22 23 28 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39
factor               : 25 26 27
if_statement         : 12
program              : 0
statement            : 9
statements           : 1 9 17 17 18 20 21
term                 : 22 23 24 25 26
var_list             : 4 5 6 7
while_statement      : 15
write_statement      : 13

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM LBRACE declarations statements RBRACE

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . LBRACE declarations statements RBRACE

    LBRACE          shift and go to state 3


state 3

    (1) program -> PROGRAM LBRACE . declarations statements RBRACE
    (2) declarations -> . declarations declaration
    (3) declarations -> . empty
    (40) empty -> .

    INT             reduce using rule 40 (empty -> .)
    FLOAT           reduce using rule 40 (empty -> .)
    BOOL            reduce using rule 40 (empty -> .)
    RBRACE          reduce using rule 40 (empty -> .)
    IDENTIFIER      reduce using rule 40 (empty -> .)
    IF              reduce using rule 40 (empty -> .)
    WRITE           reduce using rule 40 (empty -> .)
    DO              reduce using rule 40 (empty -> .)
    WHILE           reduce using rule 40 (empty -> .)

    declarations                   shift and go to state 4
    empty                          shift and go to state 5

state 4

    (1) program -> PROGRAM LBRACE declarations . statements RBRACE
    (2) declarations -> declarations . declaration
    (9) statements -> . statements statement
    (10) statements -> . empty
    (4) declaration -> . INT var_list SEMICOLON
    (5) declaration -> . FLOAT var_list SEMICOLON
    (6) declaration -> . BOOL var_list SEMICOLON
    (40) empty -> .

    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    BOOL            shift and go to state 11
    RBRACE          reduce using rule 40 (empty -> .)
    IDENTIFIER      reduce using rule 40 (empty -> .)
    IF              reduce using rule 40 (empty -> .)
    WRITE           reduce using rule 40 (empty -> .)
    DO              reduce using rule 40 (empty -> .)
    WHILE           reduce using rule 40 (empty -> .)

    statements                     shift and go to state 6
    declaration                    shift and go to state 7
    empty                          shift and go to state 8

state 5

    (3) declarations -> empty .

    INT             reduce using rule 3 (declarations -> empty .)
    FLOAT           reduce using rule 3 (declarations -> empty .)
    BOOL            reduce using rule 3 (declarations -> empty .)
    RBRACE          reduce using rule 3 (declarations -> empty .)
    IDENTIFIER      reduce using rule 3 (declarations -> empty .)
    IF              reduce using rule 3 (declarations -> empty .)
    WRITE           reduce using rule 3 (declarations -> empty .)
    DO              reduce using rule 3 (declarations -> empty .)
    WHILE           reduce using rule 3 (declarations -> empty .)


state 6

    (1) program -> PROGRAM LBRACE declarations statements . RBRACE
    (9) statements -> statements . statement
    (11) statement -> . assignment
    (12) statement -> . if_statement
    (13) statement -> . write_statement
    (14) statement -> . do_statement
    (15) statement -> . while_statement
    (16) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (17) if_statement -> . IF LPAREN condition RPAREN THEN LBRACE statements RBRACE ELSE LBRACE statements RBRACE FI
    (18) if_statement -> . IF LPAREN condition RPAREN THEN LBRACE statements RBRACE FI
    (19) write_statement -> . WRITE expression SEMICOLON
    (20) do_statement -> . DO LBRACE statements RBRACE UNTIL LPAREN condition RPAREN SEMICOLON
    (21) while_statement -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE

    RBRACE          shift and go to state 12
    IDENTIFIER      shift and go to state 19
    IF              shift and go to state 20
    WRITE           shift and go to state 21
    DO              shift and go to state 22
    WHILE           shift and go to state 23

    statement                      shift and go to state 13
    assignment                     shift and go to state 14
    if_statement                   shift and go to state 15
    write_statement                shift and go to state 16
    do_statement                   shift and go to state 17
    while_statement                shift and go to state 18

state 7

    (2) declarations -> declarations declaration .

    INT             reduce using rule 2 (declarations -> declarations declaration .)
    FLOAT           reduce using rule 2 (declarations -> declarations declaration .)
    BOOL            reduce using rule 2 (declarations -> declarations declaration .)
    RBRACE          reduce using rule 2 (declarations -> declarations declaration .)
    IDENTIFIER      reduce using rule 2 (declarations -> declarations declaration .)
    IF              reduce using rule 2 (declarations -> declarations declaration .)
    WRITE           reduce using rule 2 (declarations -> declarations declaration .)
    DO              reduce using rule 2 (declarations -> declarations declaration .)
    WHILE           reduce using rule 2 (declarations -> declarations declaration .)


state 8

    (10) statements -> empty .

    RBRACE          reduce using rule 10 (statements -> empty .)
    IDENTIFIER      reduce using rule 10 (statements -> empty .)
    IF              reduce using rule 10 (statements -> empty .)
    WRITE           reduce using rule 10 (statements -> empty .)
    DO              reduce using rule 10 (statements -> empty .)
    WHILE           reduce using rule 10 (statements -> empty .)


state 9

    (4) declaration -> INT . var_list SEMICOLON
    (7) var_list -> . var_list COMMA IDENTIFIER
    (8) var_list -> . IDENTIFIER

    IDENTIFIER      shift and go to state 25

    var_list                       shift and go to state 24

state 10

    (5) declaration -> FLOAT . var_list SEMICOLON
    (7) var_list -> . var_list COMMA IDENTIFIER
    (8) var_list -> . IDENTIFIER

    IDENTIFIER      shift and go to state 25

    var_list                       shift and go to state 26

state 11

    (6) declaration -> BOOL . var_list SEMICOLON
    (7) var_list -> . var_list COMMA IDENTIFIER
    (8) var_list -> . IDENTIFIER

    IDENTIFIER      shift and go to state 25

    var_list                       shift and go to state 27

state 12

    (1) program -> PROGRAM LBRACE declarations statements RBRACE .

    $end            reduce using rule 1 (program -> PROGRAM LBRACE declarations statements RBRACE .)


state 13

    (9) statements -> statements statement .

    RBRACE          reduce using rule 9 (statements -> statements statement .)
    IDENTIFIER      reduce using rule 9 (statements -> statements statement .)
    IF              reduce using rule 9 (statements -> statements statement .)
    WRITE           reduce using rule 9 (statements -> statements statement .)
    DO              reduce using rule 9 (statements -> statements statement .)
    WHILE           reduce using rule 9 (statements -> statements statement .)


state 14

    (11) statement -> assignment .

    RBRACE          reduce using rule 11 (statement -> assignment .)
    IDENTIFIER      reduce using rule 11 (statement -> assignment .)
    IF              reduce using rule 11 (statement -> assignment .)
    WRITE           reduce using rule 11 (statement -> assignment .)
    DO              reduce using rule 11 (statement -> assignment .)
    WHILE           reduce using rule 11 (statement -> assignment .)


state 15

    (12) statement -> if_statement .

    RBRACE          reduce using rule 12 (statement -> if_statement .)
    IDENTIFIER      reduce using rule 12 (statement -> if_statement .)
    IF              reduce using rule 12 (statement -> if_statement .)
    WRITE           reduce using rule 12 (statement -> if_statement .)
    DO              reduce using rule 12 (statement -> if_statement .)
    WHILE           reduce using rule 12 (statement -> if_statement .)


state 16

    (13) statement -> write_statement .

    RBRACE          reduce using rule 13 (statement -> write_statement .)
    IDENTIFIER      reduce using rule 13 (statement -> write_statement .)
    IF              reduce using rule 13 (statement -> write_statement .)
    WRITE           reduce using rule 13 (statement -> write_statement .)
    DO              reduce using rule 13 (statement -> write_statement .)
    WHILE           reduce using rule 13 (statement -> write_statement .)


state 17

    (14) statement -> do_statement .

    RBRACE          reduce using rule 14 (statement -> do_statement .)
    IDENTIFIER      reduce using rule 14 (statement -> do_statement .)
    IF              reduce using rule 14 (statement -> do_statement .)
    WRITE           reduce using rule 14 (statement -> do_statement .)
    DO              reduce using rule 14 (statement -> do_statement .)
    WHILE           reduce using rule 14 (statement -> do_statement .)


state 18

    (15) statement -> while_statement .

    RBRACE          reduce using rule 15 (statement -> while_statement .)
    IDENTIFIER      reduce using rule 15 (statement -> while_statement .)
    IF              reduce using rule 15 (statement -> while_statement .)
    WRITE           reduce using rule 15 (statement -> while_statement .)
    DO              reduce using rule 15 (statement -> while_statement .)
    WHILE           reduce using rule 15 (statement -> while_statement .)


state 19

    (16) assignment -> IDENTIFIER . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 28


state 20

    (17) if_statement -> IF . LPAREN condition RPAREN THEN LBRACE statements RBRACE ELSE LBRACE statements RBRACE FI
    (18) if_statement -> IF . LPAREN condition RPAREN THEN LBRACE statements RBRACE FI

    LPAREN          shift and go to state 29


state 21

    (19) write_statement -> WRITE . expression SEMICOLON
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . LPAREN expression RPAREN
    (29) factor -> . NUMBER
    (30) factor -> . FLOAT_NUMBER
    (31) factor -> . IDENTIFIER

    LPAREN          shift and go to state 33
    NUMBER          shift and go to state 34
    FLOAT_NUMBER    shift and go to state 35
    IDENTIFIER      shift and go to state 36

    expression                     shift and go to state 30
    term                           shift and go to state 31
    factor                         shift and go to state 32

state 22

    (20) do_statement -> DO . LBRACE statements RBRACE UNTIL LPAREN condition RPAREN SEMICOLON

    LBRACE          shift and go to state 37


state 23

    (21) while_statement -> WHILE . LPAREN condition RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 38


state 24

    (4) declaration -> INT var_list . SEMICOLON
    (7) var_list -> var_list . COMMA IDENTIFIER

    SEMICOLON       shift and go to state 39
    COMMA           shift and go to state 40


state 25

    (8) var_list -> IDENTIFIER .

    SEMICOLON       reduce using rule 8 (var_list -> IDENTIFIER .)
    COMMA           reduce using rule 8 (var_list -> IDENTIFIER .)


state 26

    (5) declaration -> FLOAT var_list . SEMICOLON
    (7) var_list -> var_list . COMMA IDENTIFIER

    SEMICOLON       shift and go to state 41
    COMMA           shift and go to state 40


state 27

    (6) declaration -> BOOL var_list . SEMICOLON
    (7) var_list -> var_list . COMMA IDENTIFIER

    SEMICOLON       shift and go to state 42
    COMMA           shift and go to state 40


state 28

    (16) assignment -> IDENTIFIER ASSIGN . expression SEMICOLON
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . LPAREN expression RPAREN
    (29) factor -> . NUMBER
    (30) factor -> . FLOAT_NUMBER
    (31) factor -> . IDENTIFIER

    LPAREN          shift and go to state 33
    NUMBER          shift and go to state 34
    FLOAT_NUMBER    shift and go to state 35
    IDENTIFIER      shift and go to state 36

    expression                     shift and go to state 43
    term                           shift and go to state 31
    factor                         shift and go to state 32

state 29

    (17) if_statement -> IF LPAREN . condition RPAREN THEN LBRACE statements RBRACE ELSE LBRACE statements RBRACE FI
    (18) if_statement -> IF LPAREN . condition RPAREN THEN LBRACE statements RBRACE FI
    (32) condition -> . expression EQUALS expression
    (33) condition -> . expression NOTEQUALS expression
    (34) condition -> . expression LESS expression
    (35) condition -> . expression LESSEQUAL expression
    (36) condition -> . expression GREATER expression
    (37) condition -> . expression GREATEREQUAL expression
    (38) condition -> . expression AND expression
    (39) condition -> . expression OR expression
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . LPAREN expression RPAREN
    (29) factor -> . NUMBER
    (30) factor -> . FLOAT_NUMBER
    (31) factor -> . IDENTIFIER

    LPAREN          shift and go to state 33
    NUMBER          shift and go to state 34
    FLOAT_NUMBER    shift and go to state 35
    IDENTIFIER      shift and go to state 36

    condition                      shift and go to state 44
    expression                     shift and go to state 45
    term                           shift and go to state 31
    factor                         shift and go to state 32

state 30

    (19) write_statement -> WRITE expression . SEMICOLON
    (22) expression -> expression . PLUS term
    (23) expression -> expression . MINUS term

    SEMICOLON       shift and go to state 46
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48


state 31

    (24) expression -> term .
    (25) term -> term . TIMES factor
    (26) term -> term . DIVIDE factor

    SEMICOLON       reduce using rule 24 (expression -> term .)
    PLUS            reduce using rule 24 (expression -> term .)
    MINUS           reduce using rule 24 (expression -> term .)
    EQUALS          reduce using rule 24 (expression -> term .)
    NOTEQUALS       reduce using rule 24 (expression -> term .)
    LESS            reduce using rule 24 (expression -> term .)
    LESSEQUAL       reduce using rule 24 (expression -> term .)
    GREATER         reduce using rule 24 (expression -> term .)
    GREATEREQUAL    reduce using rule 24 (expression -> term .)
    AND             reduce using rule 24 (expression -> term .)
    OR              reduce using rule 24 (expression -> term .)
    RPAREN          reduce using rule 24 (expression -> term .)
    TIMES           shift and go to state 49
    DIVIDE          shift and go to state 50


state 32

    (27) term -> factor .

    TIMES           reduce using rule 27 (term -> factor .)
    DIVIDE          reduce using rule 27 (term -> factor .)
    SEMICOLON       reduce using rule 27 (term -> factor .)
    PLUS            reduce using rule 27 (term -> factor .)
    MINUS           reduce using rule 27 (term -> factor .)
    EQUALS          reduce using rule 27 (term -> factor .)
    NOTEQUALS       reduce using rule 27 (term -> factor .)
    LESS            reduce using rule 27 (term -> factor .)
    LESSEQUAL       reduce using rule 27 (term -> factor .)
    GREATER         reduce using rule 27 (term -> factor .)
    GREATEREQUAL    reduce using rule 27 (term -> factor .)
    AND             reduce using rule 27 (term -> factor .)
    OR              reduce using rule 27 (term -> factor .)
    RPAREN          reduce using rule 27 (term -> factor .)


state 33

    (28) factor -> LPAREN . expression RPAREN
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . LPAREN expression RPAREN
    (29) factor -> . NUMBER
    (30) factor -> . FLOAT_NUMBER
    (31) factor -> . IDENTIFIER

    LPAREN          shift and go to state 33
    NUMBER          shift and go to state 34
    FLOAT_NUMBER    shift and go to state 35
    IDENTIFIER      shift and go to state 36

    expression                     shift and go to state 51
    term                           shift and go to state 31
    factor                         shift and go to state 32

state 34

    (29) factor -> NUMBER .

    TIMES           reduce using rule 29 (factor -> NUMBER .)
    DIVIDE          reduce using rule 29 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 29 (factor -> NUMBER .)
    PLUS            reduce using rule 29 (factor -> NUMBER .)
    MINUS           reduce using rule 29 (factor -> NUMBER .)
    EQUALS          reduce using rule 29 (factor -> NUMBER .)
    NOTEQUALS       reduce using rule 29 (factor -> NUMBER .)
    LESS            reduce using rule 29 (factor -> NUMBER .)
    LESSEQUAL       reduce using rule 29 (factor -> NUMBER .)
    GREATER         reduce using rule 29 (factor -> NUMBER .)
    GREATEREQUAL    reduce using rule 29 (factor -> NUMBER .)
    AND             reduce using rule 29 (factor -> NUMBER .)
    OR              reduce using rule 29 (factor -> NUMBER .)
    RPAREN          reduce using rule 29 (factor -> NUMBER .)


state 35

    (30) factor -> FLOAT_NUMBER .

    TIMES           reduce using rule 30 (factor -> FLOAT_NUMBER .)
    DIVIDE          reduce using rule 30 (factor -> FLOAT_NUMBER .)
    SEMICOLON       reduce using rule 30 (factor -> FLOAT_NUMBER .)
    PLUS            reduce using rule 30 (factor -> FLOAT_NUMBER .)
    MINUS           reduce using rule 30 (factor -> FLOAT_NUMBER .)
    EQUALS          reduce using rule 30 (factor -> FLOAT_NUMBER .)
    NOTEQUALS       reduce using rule 30 (factor -> FLOAT_NUMBER .)
    LESS            reduce using rule 30 (factor -> FLOAT_NUMBER .)
    LESSEQUAL       reduce using rule 30 (factor -> FLOAT_NUMBER .)
    GREATER         reduce using rule 30 (factor -> FLOAT_NUMBER .)
    GREATEREQUAL    reduce using rule 30 (factor -> FLOAT_NUMBER .)
    AND             reduce using rule 30 (factor -> FLOAT_NUMBER .)
    OR              reduce using rule 30 (factor -> FLOAT_NUMBER .)
    RPAREN          reduce using rule 30 (factor -> FLOAT_NUMBER .)


state 36

    (31) factor -> IDENTIFIER .

    TIMES           reduce using rule 31 (factor -> IDENTIFIER .)
    DIVIDE          reduce using rule 31 (factor -> IDENTIFIER .)
    SEMICOLON       reduce using rule 31 (factor -> IDENTIFIER .)
    PLUS            reduce using rule 31 (factor -> IDENTIFIER .)
    MINUS           reduce using rule 31 (factor -> IDENTIFIER .)
    EQUALS          reduce using rule 31 (factor -> IDENTIFIER .)
    NOTEQUALS       reduce using rule 31 (factor -> IDENTIFIER .)
    LESS            reduce using rule 31 (factor -> IDENTIFIER .)
    LESSEQUAL       reduce using rule 31 (factor -> IDENTIFIER .)
    GREATER         reduce using rule 31 (factor -> IDENTIFIER .)
    GREATEREQUAL    reduce using rule 31 (factor -> IDENTIFIER .)
    AND             reduce using rule 31 (factor -> IDENTIFIER .)
    OR              reduce using rule 31 (factor -> IDENTIFIER .)
    RPAREN          reduce using rule 31 (factor -> IDENTIFIER .)


state 37

    (20) do_statement -> DO LBRACE . statements RBRACE UNTIL LPAREN condition RPAREN SEMICOLON
    (9) statements -> . statements statement
    (10) statements -> . empty
    (40) empty -> .

    RBRACE          reduce using rule 40 (empty -> .)
    IDENTIFIER      reduce using rule 40 (empty -> .)
    IF              reduce using rule 40 (empty -> .)
    WRITE           reduce using rule 40 (empty -> .)
    DO              reduce using rule 40 (empty -> .)
    WHILE           reduce using rule 40 (empty -> .)

    statements                     shift and go to state 52
    empty                          shift and go to state 8

state 38

    (21) while_statement -> WHILE LPAREN . condition RPAREN LBRACE statements RBRACE
    (32) condition -> . expression EQUALS expression
    (33) condition -> . expression NOTEQUALS expression
    (34) condition -> . expression LESS expression
    (35) condition -> . expression LESSEQUAL expression
    (36) condition -> . expression GREATER expression
    (37) condition -> . expression GREATEREQUAL expression
    (38) condition -> . expression AND expression
    (39) condition -> . expression OR expression
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . LPAREN expression RPAREN
    (29) factor -> . NUMBER
    (30) factor -> . FLOAT_NUMBER
    (31) factor -> . IDENTIFIER

    LPAREN          shift and go to state 33
    NUMBER          shift and go to state 34
    FLOAT_NUMBER    shift and go to state 35
    IDENTIFIER      shift and go to state 36

    condition                      shift and go to state 53
    expression                     shift and go to state 45
    term                           shift and go to state 31
    factor                         shift and go to state 32

state 39

    (4) declaration -> INT var_list SEMICOLON .

    INT             reduce using rule 4 (declaration -> INT var_list SEMICOLON .)
    FLOAT           reduce using rule 4 (declaration -> INT var_list SEMICOLON .)
    BOOL            reduce using rule 4 (declaration -> INT var_list SEMICOLON .)
    RBRACE          reduce using rule 4 (declaration -> INT var_list SEMICOLON .)
    IDENTIFIER      reduce using rule 4 (declaration -> INT var_list SEMICOLON .)
    IF              reduce using rule 4 (declaration -> INT var_list SEMICOLON .)
    WRITE           reduce using rule 4 (declaration -> INT var_list SEMICOLON .)
    DO              reduce using rule 4 (declaration -> INT var_list SEMICOLON .)
    WHILE           reduce using rule 4 (declaration -> INT var_list SEMICOLON .)


state 40

    (7) var_list -> var_list COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 54


state 41

    (5) declaration -> FLOAT var_list SEMICOLON .

    INT             reduce using rule 5 (declaration -> FLOAT var_list SEMICOLON .)
    FLOAT           reduce using rule 5 (declaration -> FLOAT var_list SEMICOLON .)
    BOOL            reduce using rule 5 (declaration -> FLOAT var_list SEMICOLON .)
    RBRACE          reduce using rule 5 (declaration -> FLOAT var_list SEMICOLON .)
    IDENTIFIER      reduce using rule 5 (declaration -> FLOAT var_list SEMICOLON .)
    IF              reduce using rule 5 (declaration -> FLOAT var_list SEMICOLON .)
    WRITE           reduce using rule 5 (declaration -> FLOAT var_list SEMICOLON .)
    DO              reduce using rule 5 (declaration -> FLOAT var_list SEMICOLON .)
    WHILE           reduce using rule 5 (declaration -> FLOAT var_list SEMICOLON .)


state 42

    (6) declaration -> BOOL var_list SEMICOLON .

    INT             reduce using rule 6 (declaration -> BOOL var_list SEMICOLON .)
    FLOAT           reduce using rule 6 (declaration -> BOOL var_list SEMICOLON .)
    BOOL            reduce using rule 6 (declaration -> BOOL var_list SEMICOLON .)
    RBRACE          reduce using rule 6 (declaration -> BOOL var_list SEMICOLON .)
    IDENTIFIER      reduce using rule 6 (declaration -> BOOL var_list SEMICOLON .)
    IF              reduce using rule 6 (declaration -> BOOL var_list SEMICOLON .)
    WRITE           reduce using rule 6 (declaration -> BOOL var_list SEMICOLON .)
    DO              reduce using rule 6 (declaration -> BOOL var_list SEMICOLON .)
    WHILE           reduce using rule 6 (declaration -> BOOL var_list SEMICOLON .)


state 43

    (16) assignment -> IDENTIFIER ASSIGN expression . SEMICOLON
    (22) expression -> expression . PLUS term
    (23) expression -> expression . MINUS term

    SEMICOLON       shift and go to state 55
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48


state 44

    (17) if_statement -> IF LPAREN condition . RPAREN THEN LBRACE statements RBRACE ELSE LBRACE statements RBRACE FI
    (18) if_statement -> IF LPAREN condition . RPAREN THEN LBRACE statements RBRACE FI

    RPAREN          shift and go to state 56


state 45

    (32) condition -> expression . EQUALS expression
    (33) condition -> expression . NOTEQUALS expression
    (34) condition -> expression . LESS expression
    (35) condition -> expression . LESSEQUAL expression
    (36) condition -> expression . GREATER expression
    (37) condition -> expression . GREATEREQUAL expression
    (38) condition -> expression . AND expression
    (39) condition -> expression . OR expression
    (22) expression -> expression . PLUS term
    (23) expression -> expression . MINUS term

    EQUALS          shift and go to state 57
    NOTEQUALS       shift and go to state 58
    LESS            shift and go to state 59
    LESSEQUAL       shift and go to state 60
    GREATER         shift and go to state 61
    GREATEREQUAL    shift and go to state 62
    AND             shift and go to state 63
    OR              shift and go to state 64
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48


state 46

    (19) write_statement -> WRITE expression SEMICOLON .

    RBRACE          reduce using rule 19 (write_statement -> WRITE expression SEMICOLON .)
    IDENTIFIER      reduce using rule 19 (write_statement -> WRITE expression SEMICOLON .)
    IF              reduce using rule 19 (write_statement -> WRITE expression SEMICOLON .)
    WRITE           reduce using rule 19 (write_statement -> WRITE expression SEMICOLON .)
    DO              reduce using rule 19 (write_statement -> WRITE expression SEMICOLON .)
    WHILE           reduce using rule 19 (write_statement -> WRITE expression SEMICOLON .)


state 47

    (22) expression -> expression PLUS . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . LPAREN expression RPAREN
    (29) factor -> . NUMBER
    (30) factor -> . FLOAT_NUMBER
    (31) factor -> . IDENTIFIER

    LPAREN          shift and go to state 33
    NUMBER          shift and go to state 34
    FLOAT_NUMBER    shift and go to state 35
    IDENTIFIER      shift and go to state 36

    term                           shift and go to state 65
    factor                         shift and go to state 32

state 48

    (23) expression -> expression MINUS . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . LPAREN expression RPAREN
    (29) factor -> . NUMBER
    (30) factor -> . FLOAT_NUMBER
    (31) factor -> . IDENTIFIER

    LPAREN          shift and go to state 33
    NUMBER          shift and go to state 34
    FLOAT_NUMBER    shift and go to state 35
    IDENTIFIER      shift and go to state 36

    term                           shift and go to state 66
    factor                         shift and go to state 32

state 49

    (25) term -> term TIMES . factor
    (28) factor -> . LPAREN expression RPAREN
    (29) factor -> . NUMBER
    (30) factor -> . FLOAT_NUMBER
    (31) factor -> . IDENTIFIER

    LPAREN          shift and go to state 33
    NUMBER          shift and go to state 34
    FLOAT_NUMBER    shift and go to state 35
    IDENTIFIER      shift and go to state 36

    factor                         shift and go to state 67

state 50

    (26) term -> term DIVIDE . factor
    (28) factor -> . LPAREN expression RPAREN
    (29) factor -> . NUMBER
    (30) factor -> . FLOAT_NUMBER
    (31) factor -> . IDENTIFIER

    LPAREN          shift and go to state 33
    NUMBER          shift and go to state 34
    FLOAT_NUMBER    shift and go to state 35
    IDENTIFIER      shift and go to state 36

    factor                         shift and go to state 68

state 51

    (28) factor -> LPAREN expression . RPAREN
    (22) expression -> expression . PLUS term
    (23) expression -> expression . MINUS term

    RPAREN          shift and go to state 69
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48


state 52

    (20) do_statement -> DO LBRACE statements . RBRACE UNTIL LPAREN condition RPAREN SEMICOLON
    (9) statements -> statements . statement
    (11) statement -> . assignment
    (12) statement -> . if_statement
    (13) statement -> . write_statement
    (14) statement -> . do_statement
    (15) statement -> . while_statement
    (16) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (17) if_statement -> . IF LPAREN condition RPAREN THEN LBRACE statements RBRACE ELSE LBRACE statements RBRACE FI
    (18) if_statement -> . IF LPAREN condition RPAREN THEN LBRACE statements RBRACE FI
    (19) write_statement -> . WRITE expression SEMICOLON
    (20) do_statement -> . DO LBRACE statements RBRACE UNTIL LPAREN condition RPAREN SEMICOLON
    (21) while_statement -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE

    RBRACE          shift and go to state 70
    IDENTIFIER      shift and go to state 19
    IF              shift and go to state 20
    WRITE           shift and go to state 21
    DO              shift and go to state 22
    WHILE           shift and go to state 23

    statement                      shift and go to state 13
    assignment                     shift and go to state 14
    if_statement                   shift and go to state 15
    write_statement                shift and go to state 16
    do_statement                   shift and go to state 17
    while_statement                shift and go to state 18

state 53

    (21) while_statement -> WHILE LPAREN condition . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 71


state 54

    (7) var_list -> var_list COMMA IDENTIFIER .

    SEMICOLON       reduce using rule 7 (var_list -> var_list COMMA IDENTIFIER .)
    COMMA           reduce using rule 7 (var_list -> var_list COMMA IDENTIFIER .)


state 55

    (16) assignment -> IDENTIFIER ASSIGN expression SEMICOLON .

    RBRACE          reduce using rule 16 (assignment -> IDENTIFIER ASSIGN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 16 (assignment -> IDENTIFIER ASSIGN expression SEMICOLON .)
    IF              reduce using rule 16 (assignment -> IDENTIFIER ASSIGN expression SEMICOLON .)
    WRITE           reduce using rule 16 (assignment -> IDENTIFIER ASSIGN expression SEMICOLON .)
    DO              reduce using rule 16 (assignment -> IDENTIFIER ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 16 (assignment -> IDENTIFIER ASSIGN expression SEMICOLON .)


state 56

    (17) if_statement -> IF LPAREN condition RPAREN . THEN LBRACE statements RBRACE ELSE LBRACE statements RBRACE FI
    (18) if_statement -> IF LPAREN condition RPAREN . THEN LBRACE statements RBRACE FI

    THEN            shift and go to state 72


state 57

    (32) condition -> expression EQUALS . expression
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . LPAREN expression RPAREN
    (29) factor -> . NUMBER
    (30) factor -> . FLOAT_NUMBER
    (31) factor -> . IDENTIFIER

    LPAREN          shift and go to state 33
    NUMBER          shift and go to state 34
    FLOAT_NUMBER    shift and go to state 35
    IDENTIFIER      shift and go to state 36

    expression                     shift and go to state 73
    term                           shift and go to state 31
    factor                         shift and go to state 32

state 58

    (33) condition -> expression NOTEQUALS . expression
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . LPAREN expression RPAREN
    (29) factor -> . NUMBER
    (30) factor -> . FLOAT_NUMBER
    (31) factor -> . IDENTIFIER

    LPAREN          shift and go to state 33
    NUMBER          shift and go to state 34
    FLOAT_NUMBER    shift and go to state 35
    IDENTIFIER      shift and go to state 36

    expression                     shift and go to state 74
    term                           shift and go to state 31
    factor                         shift and go to state 32

state 59

    (34) condition -> expression LESS . expression
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . LPAREN expression RPAREN
    (29) factor -> . NUMBER
    (30) factor -> . FLOAT_NUMBER
    (31) factor -> . IDENTIFIER

    LPAREN          shift and go to state 33
    NUMBER          shift and go to state 34
    FLOAT_NUMBER    shift and go to state 35
    IDENTIFIER      shift and go to state 36

    expression                     shift and go to state 75
    term                           shift and go to state 31
    factor                         shift and go to state 32

state 60

    (35) condition -> expression LESSEQUAL . expression
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . LPAREN expression RPAREN
    (29) factor -> . NUMBER
    (30) factor -> . FLOAT_NUMBER
    (31) factor -> . IDENTIFIER

    LPAREN          shift and go to state 33
    NUMBER          shift and go to state 34
    FLOAT_NUMBER    shift and go to state 35
    IDENTIFIER      shift and go to state 36

    expression                     shift and go to state 76
    term                           shift and go to state 31
    factor                         shift and go to state 32

state 61

    (36) condition -> expression GREATER . expression
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . LPAREN expression RPAREN
    (29) factor -> . NUMBER
    (30) factor -> . FLOAT_NUMBER
    (31) factor -> . IDENTIFIER

    LPAREN          shift and go to state 33
    NUMBER          shift and go to state 34
    FLOAT_NUMBER    shift and go to state 35
    IDENTIFIER      shift and go to state 36

    expression                     shift and go to state 77
    term                           shift and go to state 31
    factor                         shift and go to state 32

state 62

    (37) condition -> expression GREATEREQUAL . expression
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . LPAREN expression RPAREN
    (29) factor -> . NUMBER
    (30) factor -> . FLOAT_NUMBER
    (31) factor -> . IDENTIFIER

    LPAREN          shift and go to state 33
    NUMBER          shift and go to state 34
    FLOAT_NUMBER    shift and go to state 35
    IDENTIFIER      shift and go to state 36

    expression                     shift and go to state 78
    term                           shift and go to state 31
    factor                         shift and go to state 32

state 63

    (38) condition -> expression AND . expression
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . LPAREN expression RPAREN
    (29) factor -> . NUMBER
    (30) factor -> . FLOAT_NUMBER
    (31) factor -> . IDENTIFIER

    LPAREN          shift and go to state 33
    NUMBER          shift and go to state 34
    FLOAT_NUMBER    shift and go to state 35
    IDENTIFIER      shift and go to state 36

    expression                     shift and go to state 79
    term                           shift and go to state 31
    factor                         shift and go to state 32

state 64

    (39) condition -> expression OR . expression
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . LPAREN expression RPAREN
    (29) factor -> . NUMBER
    (30) factor -> . FLOAT_NUMBER
    (31) factor -> . IDENTIFIER

    LPAREN          shift and go to state 33
    NUMBER          shift and go to state 34
    FLOAT_NUMBER    shift and go to state 35
    IDENTIFIER      shift and go to state 36

    expression                     shift and go to state 80
    term                           shift and go to state 31
    factor                         shift and go to state 32

state 65

    (22) expression -> expression PLUS term .
    (25) term -> term . TIMES factor
    (26) term -> term . DIVIDE factor

    SEMICOLON       reduce using rule 22 (expression -> expression PLUS term .)
    PLUS            reduce using rule 22 (expression -> expression PLUS term .)
    MINUS           reduce using rule 22 (expression -> expression PLUS term .)
    EQUALS          reduce using rule 22 (expression -> expression PLUS term .)
    NOTEQUALS       reduce using rule 22 (expression -> expression PLUS term .)
    LESS            reduce using rule 22 (expression -> expression PLUS term .)
    LESSEQUAL       reduce using rule 22 (expression -> expression PLUS term .)
    GREATER         reduce using rule 22 (expression -> expression PLUS term .)
    GREATEREQUAL    reduce using rule 22 (expression -> expression PLUS term .)
    AND             reduce using rule 22 (expression -> expression PLUS term .)
    OR              reduce using rule 22 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 22 (expression -> expression PLUS term .)
    TIMES           shift and go to state 49
    DIVIDE          shift and go to state 50


state 66

    (23) expression -> expression MINUS term .
    (25) term -> term . TIMES factor
    (26) term -> term . DIVIDE factor

    SEMICOLON       reduce using rule 23 (expression -> expression MINUS term .)
    PLUS            reduce using rule 23 (expression -> expression MINUS term .)
    MINUS           reduce using rule 23 (expression -> expression MINUS term .)
    EQUALS          reduce using rule 23 (expression -> expression MINUS term .)
    NOTEQUALS       reduce using rule 23 (expression -> expression MINUS term .)
    LESS            reduce using rule 23 (expression -> expression MINUS term .)
    LESSEQUAL       reduce using rule 23 (expression -> expression MINUS term .)
    GREATER         reduce using rule 23 (expression -> expression MINUS term .)
    GREATEREQUAL    reduce using rule 23 (expression -> expression MINUS term .)
    AND             reduce using rule 23 (expression -> expression MINUS term .)
    OR              reduce using rule 23 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 23 (expression -> expression MINUS term .)
    TIMES           shift and go to state 49
    DIVIDE          shift and go to state 50


state 67

    (25) term -> term TIMES factor .

    TIMES           reduce using rule 25 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 25 (term -> term TIMES factor .)
    SEMICOLON       reduce using rule 25 (term -> term TIMES factor .)
    PLUS            reduce using rule 25 (term -> term TIMES factor .)
    MINUS           reduce using rule 25 (term -> term TIMES factor .)
    EQUALS          reduce using rule 25 (term -> term TIMES factor .)
    NOTEQUALS       reduce using rule 25 (term -> term TIMES factor .)
    LESS            reduce using rule 25 (term -> term TIMES factor .)
    LESSEQUAL       reduce using rule 25 (term -> term TIMES factor .)
    GREATER         reduce using rule 25 (term -> term TIMES factor .)
    GREATEREQUAL    reduce using rule 25 (term -> term TIMES factor .)
    AND             reduce using rule 25 (term -> term TIMES factor .)
    OR              reduce using rule 25 (term -> term TIMES factor .)
    RPAREN          reduce using rule 25 (term -> term TIMES factor .)


state 68

    (26) term -> term DIVIDE factor .

    TIMES           reduce using rule 26 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 26 (term -> term DIVIDE factor .)
    SEMICOLON       reduce using rule 26 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 26 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 26 (term -> term DIVIDE factor .)
    EQUALS          reduce using rule 26 (term -> term DIVIDE factor .)
    NOTEQUALS       reduce using rule 26 (term -> term DIVIDE factor .)
    LESS            reduce using rule 26 (term -> term DIVIDE factor .)
    LESSEQUAL       reduce using rule 26 (term -> term DIVIDE factor .)
    GREATER         reduce using rule 26 (term -> term DIVIDE factor .)
    GREATEREQUAL    reduce using rule 26 (term -> term DIVIDE factor .)
    AND             reduce using rule 26 (term -> term DIVIDE factor .)
    OR              reduce using rule 26 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 26 (term -> term DIVIDE factor .)


state 69

    (28) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 28 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 28 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 28 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 28 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 28 (factor -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 28 (factor -> LPAREN expression RPAREN .)
    NOTEQUALS       reduce using rule 28 (factor -> LPAREN expression RPAREN .)
    LESS            reduce using rule 28 (factor -> LPAREN expression RPAREN .)
    LESSEQUAL       reduce using rule 28 (factor -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 28 (factor -> LPAREN expression RPAREN .)
    GREATEREQUAL    reduce using rule 28 (factor -> LPAREN expression RPAREN .)
    AND             reduce using rule 28 (factor -> LPAREN expression RPAREN .)
    OR              reduce using rule 28 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 28 (factor -> LPAREN expression RPAREN .)


state 70

    (20) do_statement -> DO LBRACE statements RBRACE . UNTIL LPAREN condition RPAREN SEMICOLON

    UNTIL           shift and go to state 81


state 71

    (21) while_statement -> WHILE LPAREN condition RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 82


state 72

    (17) if_statement -> IF LPAREN condition RPAREN THEN . LBRACE statements RBRACE ELSE LBRACE statements RBRACE FI
    (18) if_statement -> IF LPAREN condition RPAREN THEN . LBRACE statements RBRACE FI

    LBRACE          shift and go to state 83


state 73

    (32) condition -> expression EQUALS expression .
    (22) expression -> expression . PLUS term
    (23) expression -> expression . MINUS term

    RPAREN          reduce using rule 32 (condition -> expression EQUALS expression .)
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48


state 74

    (33) condition -> expression NOTEQUALS expression .
    (22) expression -> expression . PLUS term
    (23) expression -> expression . MINUS term

    RPAREN          reduce using rule 33 (condition -> expression NOTEQUALS expression .)
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48


state 75

    (34) condition -> expression LESS expression .
    (22) expression -> expression . PLUS term
    (23) expression -> expression . MINUS term

    RPAREN          reduce using rule 34 (condition -> expression LESS expression .)
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48


state 76

    (35) condition -> expression LESSEQUAL expression .
    (22) expression -> expression . PLUS term
    (23) expression -> expression . MINUS term

    RPAREN          reduce using rule 35 (condition -> expression LESSEQUAL expression .)
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48


state 77

    (36) condition -> expression GREATER expression .
    (22) expression -> expression . PLUS term
    (23) expression -> expression . MINUS term

    RPAREN          reduce using rule 36 (condition -> expression GREATER expression .)
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48


state 78

    (37) condition -> expression GREATEREQUAL expression .
    (22) expression -> expression . PLUS term
    (23) expression -> expression . MINUS term

    RPAREN          reduce using rule 37 (condition -> expression GREATEREQUAL expression .)
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48


state 79

    (38) condition -> expression AND expression .
    (22) expression -> expression . PLUS term
    (23) expression -> expression . MINUS term

    RPAREN          reduce using rule 38 (condition -> expression AND expression .)
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48


state 80

    (39) condition -> expression OR expression .
    (22) expression -> expression . PLUS term
    (23) expression -> expression . MINUS term

    RPAREN          reduce using rule 39 (condition -> expression OR expression .)
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48


state 81

    (20) do_statement -> DO LBRACE statements RBRACE UNTIL . LPAREN condition RPAREN SEMICOLON

    LPAREN          shift and go to state 84


state 82

    (21) while_statement -> WHILE LPAREN condition RPAREN LBRACE . statements RBRACE
    (9) statements -> . statements statement
    (10) statements -> . empty
    (40) empty -> .

    RBRACE          reduce using rule 40 (empty -> .)
    IDENTIFIER      reduce using rule 40 (empty -> .)
    IF              reduce using rule 40 (empty -> .)
    WRITE           reduce using rule 40 (empty -> .)
    DO              reduce using rule 40 (empty -> .)
    WHILE           reduce using rule 40 (empty -> .)

    statements                     shift and go to state 85
    empty                          shift and go to state 8

state 83

    (17) if_statement -> IF LPAREN condition RPAREN THEN LBRACE . statements RBRACE ELSE LBRACE statements RBRACE FI
    (18) if_statement -> IF LPAREN condition RPAREN THEN LBRACE . statements RBRACE FI
    (9) statements -> . statements statement
    (10) statements -> . empty
    (40) empty -> .

    RBRACE          reduce using rule 40 (empty -> .)
    IDENTIFIER      reduce using rule 40 (empty -> .)
    IF              reduce using rule 40 (empty -> .)
    WRITE           reduce using rule 40 (empty -> .)
    DO              reduce using rule 40 (empty -> .)
    WHILE           reduce using rule 40 (empty -> .)

    statements                     shift and go to state 86
    empty                          shift and go to state 8

state 84

    (20) do_statement -> DO LBRACE statements RBRACE UNTIL LPAREN . condition RPAREN SEMICOLON
    (32) condition -> . expression EQUALS expression
    (33) condition -> . expression NOTEQUALS expression
    (34) condition -> . expression LESS expression
    (35) condition -> . expression LESSEQUAL expression
    (36) condition -> . expression GREATER expression
    (37) condition -> . expression GREATEREQUAL expression
    (38) condition -> . expression AND expression
    (39) condition -> . expression OR expression
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . LPAREN expression RPAREN
    (29) factor -> . NUMBER
    (30) factor -> . FLOAT_NUMBER
    (31) factor -> . IDENTIFIER

    LPAREN          shift and go to state 33
    NUMBER          shift and go to state 34
    FLOAT_NUMBER    shift and go to state 35
    IDENTIFIER      shift and go to state 36

    condition                      shift and go to state 87
    expression                     shift and go to state 45
    term                           shift and go to state 31
    factor                         shift and go to state 32

state 85

    (21) while_statement -> WHILE LPAREN condition RPAREN LBRACE statements . RBRACE
    (9) statements -> statements . statement
    (11) statement -> . assignment
    (12) statement -> . if_statement
    (13) statement -> . write_statement
    (14) statement -> . do_statement
    (15) statement -> . while_statement
    (16) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (17) if_statement -> . IF LPAREN condition RPAREN THEN LBRACE statements RBRACE ELSE LBRACE statements RBRACE FI
    (18) if_statement -> . IF LPAREN condition RPAREN THEN LBRACE statements RBRACE FI
    (19) write_statement -> . WRITE expression SEMICOLON
    (20) do_statement -> . DO LBRACE statements RBRACE UNTIL LPAREN condition RPAREN SEMICOLON
    (21) while_statement -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE

    RBRACE          shift and go to state 88
    IDENTIFIER      shift and go to state 19
    IF              shift and go to state 20
    WRITE           shift and go to state 21
    DO              shift and go to state 22
    WHILE           shift and go to state 23

    statement                      shift and go to state 13
    assignment                     shift and go to state 14
    if_statement                   shift and go to state 15
    write_statement                shift and go to state 16
    do_statement                   shift and go to state 17
    while_statement                shift and go to state 18

state 86

    (17) if_statement -> IF LPAREN condition RPAREN THEN LBRACE statements . RBRACE ELSE LBRACE statements RBRACE FI
    (18) if_statement -> IF LPAREN condition RPAREN THEN LBRACE statements . RBRACE FI
    (9) statements -> statements . statement
    (11) statement -> . assignment
    (12) statement -> . if_statement
    (13) statement -> . write_statement
    (14) statement -> . do_statement
    (15) statement -> . while_statement
    (16) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (17) if_statement -> . IF LPAREN condition RPAREN THEN LBRACE statements RBRACE ELSE LBRACE statements RBRACE FI
    (18) if_statement -> . IF LPAREN condition RPAREN THEN LBRACE statements RBRACE FI
    (19) write_statement -> . WRITE expression SEMICOLON
    (20) do_statement -> . DO LBRACE statements RBRACE UNTIL LPAREN condition RPAREN SEMICOLON
    (21) while_statement -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE

    RBRACE          shift and go to state 89
    IDENTIFIER      shift and go to state 19
    IF              shift and go to state 20
    WRITE           shift and go to state 21
    DO              shift and go to state 22
    WHILE           shift and go to state 23

    statement                      shift and go to state 13
    assignment                     shift and go to state 14
    if_statement                   shift and go to state 15
    write_statement                shift and go to state 16
    do_statement                   shift and go to state 17
    while_statement                shift and go to state 18

state 87

    (20) do_statement -> DO LBRACE statements RBRACE UNTIL LPAREN condition . RPAREN SEMICOLON

    RPAREN          shift and go to state 90


state 88

    (21) while_statement -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .

    RBRACE          reduce using rule 21 (while_statement -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    IDENTIFIER      reduce using rule 21 (while_statement -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    IF              reduce using rule 21 (while_statement -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    WRITE           reduce using rule 21 (while_statement -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    DO              reduce using rule 21 (while_statement -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 21 (while_statement -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)


state 89

    (17) if_statement -> IF LPAREN condition RPAREN THEN LBRACE statements RBRACE . ELSE LBRACE statements RBRACE FI
    (18) if_statement -> IF LPAREN condition RPAREN THEN LBRACE statements RBRACE . FI

    ELSE            shift and go to state 91
    FI              shift and go to state 92


state 90

    (20) do_statement -> DO LBRACE statements RBRACE UNTIL LPAREN condition RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 93


state 91

    (17) if_statement -> IF LPAREN condition RPAREN THEN LBRACE statements RBRACE ELSE . LBRACE statements RBRACE FI

    LBRACE          shift and go to state 94


state 92

    (18) if_statement -> IF LPAREN condition RPAREN THEN LBRACE statements RBRACE FI .

    RBRACE          reduce using rule 18 (if_statement -> IF LPAREN condition RPAREN THEN LBRACE statements RBRACE FI .)
    IDENTIFIER      reduce using rule 18 (if_statement -> IF LPAREN condition RPAREN THEN LBRACE statements RBRACE FI .)
    IF              reduce using rule 18 (if_statement -> IF LPAREN condition RPAREN THEN LBRACE statements RBRACE FI .)
    WRITE           reduce using rule 18 (if_statement -> IF LPAREN condition RPAREN THEN LBRACE statements RBRACE FI .)
    DO              reduce using rule 18 (if_statement -> IF LPAREN condition RPAREN THEN LBRACE statements RBRACE FI .)
    WHILE           reduce using rule 18 (if_statement -> IF LPAREN condition RPAREN THEN LBRACE statements RBRACE FI .)


state 93

    (20) do_statement -> DO LBRACE statements RBRACE UNTIL LPAREN condition RPAREN SEMICOLON .

    RBRACE          reduce using rule 20 (do_statement -> DO LBRACE statements RBRACE UNTIL LPAREN condition RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 20 (do_statement -> DO LBRACE statements RBRACE UNTIL LPAREN condition RPAREN SEMICOLON .)
    IF              reduce using rule 20 (do_statement -> DO LBRACE statements RBRACE UNTIL LPAREN condition RPAREN SEMICOLON .)
    WRITE           reduce using rule 20 (do_statement -> DO LBRACE statements RBRACE UNTIL LPAREN condition RPAREN SEMICOLON .)
    DO              reduce using rule 20 (do_statement -> DO LBRACE statements RBRACE UNTIL LPAREN condition RPAREN SEMICOLON .)
    WHILE           reduce using rule 20 (do_statement -> DO LBRACE statements RBRACE UNTIL LPAREN condition RPAREN SEMICOLON .)


state 94

    (17) if_statement -> IF LPAREN condition RPAREN THEN LBRACE statements RBRACE ELSE LBRACE . statements RBRACE FI
    (9) statements -> . statements statement
    (10) statements -> . empty
    (40) empty -> .

    RBRACE          reduce using rule 40 (empty -> .)
    IDENTIFIER      reduce using rule 40 (empty -> .)
    IF              reduce using rule 40 (empty -> .)
    WRITE           reduce using rule 40 (empty -> .)
    DO              reduce using rule 40 (empty -> .)
    WHILE           reduce using rule 40 (empty -> .)

    statements                     shift and go to state 95
    empty                          shift and go to state 8

state 95

    (17) if_statement -> IF LPAREN condition RPAREN THEN LBRACE statements RBRACE ELSE LBRACE statements . RBRACE FI
    (9) statements -> statements . statement
    (11) statement -> . assignment
    (12) statement -> . if_statement
    (13) statement -> . write_statement
    (14) statement -> . do_statement
    (15) statement -> . while_statement
    (16) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (17) if_statement -> . IF LPAREN condition RPAREN THEN LBRACE statements RBRACE ELSE LBRACE statements RBRACE FI
    (18) if_statement -> . IF LPAREN condition RPAREN THEN LBRACE statements RBRACE FI
    (19) write_statement -> . WRITE expression SEMICOLON
    (20) do_statement -> . DO LBRACE statements RBRACE UNTIL LPAREN condition RPAREN SEMICOLON
    (21) while_statement -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE

    RBRACE          shift and go to state 96
    IDENTIFIER      shift and go to state 19
    IF              shift and go to state 20
    WRITE           shift and go to state 21
    DO              shift and go to state 22
    WHILE           shift and go to state 23

    statement                      shift and go to state 13
    assignment                     shift and go to state 14
    if_statement                   shift and go to state 15
    write_statement                shift and go to state 16
    do_statement                   shift and go to state 17
    while_statement                shift and go to state 18

state 96

    (17) if_statement -> IF LPAREN condition RPAREN THEN LBRACE statements RBRACE ELSE LBRACE statements RBRACE . FI

    FI              shift and go to state 97


state 97

    (17) if_statement -> IF LPAREN condition RPAREN THEN LBRACE statements RBRACE ELSE LBRACE statements RBRACE FI .

    RBRACE          reduce using rule 17 (if_statement -> IF LPAREN condition RPAREN THEN LBRACE statements RBRACE ELSE LBRACE statements RBRACE FI .)
    IDENTIFIER      reduce using rule 17 (if_statement -> IF LPAREN condition RPAREN THEN LBRACE statements RBRACE ELSE LBRACE statements RBRACE FI .)
    IF              reduce using rule 17 (if_statement -> IF LPAREN condition RPAREN THEN LBRACE statements RBRACE ELSE LBRACE statements RBRACE FI .)
    WRITE           reduce using rule 17 (if_statement -> IF LPAREN condition RPAREN THEN LBRACE statements RBRACE ELSE LBRACE statements RBRACE FI .)
    DO              reduce using rule 17 (if_statement -> IF LPAREN condition RPAREN THEN LBRACE statements RBRACE ELSE LBRACE statements RBRACE FI .)
    WHILE           reduce using rule 17 (if_statement -> IF LPAREN condition RPAREN THEN LBRACE statements RBRACE ELSE LBRACE statements RBRACE FI .)

