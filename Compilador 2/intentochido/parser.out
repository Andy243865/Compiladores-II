Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    MULTILINE_COMMENT

Grammar

Rule 0     S' -> main
Rule 1     main -> MAIN LBRACE declarations statements RBRACE
Rule 2     declarations -> declarations declaration
Rule 3     declarations -> empty
Rule 4     declaration -> INT var_list SEMICOLON
Rule 5     declaration -> FLOAT var_list SEMICOLON
Rule 6     declaration -> BOOL var_list SEMICOLON
Rule 7     var_list -> var_list COMMA IDENTIFIER
Rule 8     var_list -> IDENTIFIER
Rule 9     do_until_statement -> DO LBRACE statements RBRACE UNTIL LPAREN condition RPAREN SEMICOLON
Rule 10    statements -> statements statement
Rule 11    statements -> empty
Rule 12    statement -> assignment
Rule 13    statement -> if_statement
Rule 14    statement -> write_statement
Rule 15    statement -> do_statement
Rule 16    statement -> while_statement
Rule 17    statement -> do_until_statement
Rule 18    assignment -> IDENTIFIER ASSIGN expression SEMICOLON
Rule 19    if_statement -> IF LPAREN condition RPAREN THEN LBRACE statements RBRACE ELSE LBRACE statements RBRACE FI
Rule 20    if_statement -> IF LPAREN condition RPAREN THEN LBRACE statements RBRACE FI
Rule 21    write_statement -> WRITE expression SEMICOLON
Rule 22    do_statement -> DO LBRACE statements RBRACE WHILE LPAREN condition RPAREN SEMICOLON
Rule 23    while_statement -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE
Rule 24    expression -> expression PLUS term
Rule 25    expression -> expression MINUS term
Rule 26    expression -> term
Rule 27    term -> term TIMES factor
Rule 28    term -> term DIVIDE factor
Rule 29    term -> factor
Rule 30    factor -> LPAREN expression RPAREN
Rule 31    factor -> NUMBER
Rule 32    factor -> FLOAT_NUMBER
Rule 33    factor -> IDENTIFIER
Rule 34    factor -> BOOL_VALUE
Rule 35    condition -> expression EQUALS expression
Rule 36    condition -> expression NOTEQUALS expression
Rule 37    condition -> expression LESS expression
Rule 38    condition -> expression LESSEQUAL expression
Rule 39    condition -> expression GREATER expression
Rule 40    condition -> expression GREATEREQUAL expression
Rule 41    condition -> expression AND expression
Rule 42    condition -> expression OR expression
Rule 43    empty -> <empty>
Rule 44    expression -> expression PLUS empty
Rule 45    expression -> expression MINUS empty

Terminals, with rules where they appear

AND                  : 41
ASSIGN               : 18
BOOL                 : 6
BOOL_VALUE           : 34
COMMA                : 7
COMMENT              : 
DIVIDE               : 28
DO                   : 9 22
ELSE                 : 19
EQUALS               : 35
FI                   : 19 20
FLOAT                : 5
FLOAT_NUMBER         : 32
GREATER              : 39
GREATEREQUAL         : 40
IDENTIFIER           : 7 8 18 33
IF                   : 19 20
INT                  : 4
LBRACE               : 1 9 19 19 20 22 23
LESS                 : 37
LESSEQUAL            : 38
LPAREN               : 9 19 20 22 23 30
MAIN                 : 1
MINUS                : 25 45
MULTILINE_COMMENT    : 
NOTEQUALS            : 36
NUMBER               : 31
OR                   : 42
PLUS                 : 24 44
RBRACE               : 1 9 19 19 20 22 23
RPAREN               : 9 19 20 22 23 30
SEMICOLON            : 4 5 6 9 18 21 22
THEN                 : 19 20
TIMES                : 27
UNTIL                : 9
WHILE                : 22 23
WRITE                : 21
error                : 

Nonterminals, with rules where they appear

assignment           : 12
condition            : 9 19 20 22 23
declaration          : 2
declarations         : 1 2
do_statement         : 15
do_until_statement   : 17
empty                : 3 11 44 45
expression           : 18 21 24 25 30 35 35 36 36 37 37 38 38 39 39 40 40 41 41 42 42 44 45
factor               : 27 28 29
if_statement         : 13
main                 : 0
statement            : 10
statements           : 1 9 10 19 19 20 22 23
term                 : 24 25 26 27 28
var_list             : 4 5 6 7
while_statement      : 16
write_statement      : 14

Parsing method: LALR

state 0

    (0) S' -> . main
    (1) main -> . MAIN LBRACE declarations statements RBRACE

    MAIN            shift and go to state 2

    main                           shift and go to state 1

state 1

    (0) S' -> main .



state 2

    (1) main -> MAIN . LBRACE declarations statements RBRACE

    LBRACE          shift and go to state 3


state 3

    (1) main -> MAIN LBRACE . declarations statements RBRACE
    (2) declarations -> . declarations declaration
    (3) declarations -> . empty
    (43) empty -> .

    INT             reduce using rule 43 (empty -> .)
    FLOAT           reduce using rule 43 (empty -> .)
    BOOL            reduce using rule 43 (empty -> .)
    RBRACE          reduce using rule 43 (empty -> .)
    IDENTIFIER      reduce using rule 43 (empty -> .)
    IF              reduce using rule 43 (empty -> .)
    WRITE           reduce using rule 43 (empty -> .)
    DO              reduce using rule 43 (empty -> .)
    WHILE           reduce using rule 43 (empty -> .)

    declarations                   shift and go to state 4
    empty                          shift and go to state 5

state 4

    (1) main -> MAIN LBRACE declarations . statements RBRACE
    (2) declarations -> declarations . declaration
    (10) statements -> . statements statement
    (11) statements -> . empty
    (4) declaration -> . INT var_list SEMICOLON
    (5) declaration -> . FLOAT var_list SEMICOLON
    (6) declaration -> . BOOL var_list SEMICOLON
    (43) empty -> .

    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    BOOL            shift and go to state 11
    RBRACE          reduce using rule 43 (empty -> .)
    IDENTIFIER      reduce using rule 43 (empty -> .)
    IF              reduce using rule 43 (empty -> .)
    WRITE           reduce using rule 43 (empty -> .)
    DO              reduce using rule 43 (empty -> .)
    WHILE           reduce using rule 43 (empty -> .)

    statements                     shift and go to state 6
    declaration                    shift and go to state 7
    empty                          shift and go to state 8

state 5

    (3) declarations -> empty .

    INT             reduce using rule 3 (declarations -> empty .)
    FLOAT           reduce using rule 3 (declarations -> empty .)
    BOOL            reduce using rule 3 (declarations -> empty .)
    RBRACE          reduce using rule 3 (declarations -> empty .)
    IDENTIFIER      reduce using rule 3 (declarations -> empty .)
    IF              reduce using rule 3 (declarations -> empty .)
    WRITE           reduce using rule 3 (declarations -> empty .)
    DO              reduce using rule 3 (declarations -> empty .)
    WHILE           reduce using rule 3 (declarations -> empty .)


state 6

    (1) main -> MAIN LBRACE declarations statements . RBRACE
    (10) statements -> statements . statement
    (12) statement -> . assignment
    (13) statement -> . if_statement
    (14) statement -> . write_statement
    (15) statement -> . do_statement
    (16) statement -> . while_statement
    (17) statement -> . do_until_statement
    (18) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (19) if_statement -> . IF LPAREN condition RPAREN THEN LBRACE statements RBRACE ELSE LBRACE statements RBRACE FI
    (20) if_statement -> . IF LPAREN condition RPAREN THEN LBRACE statements RBRACE FI
    (21) write_statement -> . WRITE expression SEMICOLON
    (22) do_statement -> . DO LBRACE statements RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (23) while_statement -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (9) do_until_statement -> . DO LBRACE statements RBRACE UNTIL LPAREN condition RPAREN SEMICOLON

    RBRACE          shift and go to state 12
    IDENTIFIER      shift and go to state 20
    IF              shift and go to state 21
    WRITE           shift and go to state 22
    DO              shift and go to state 23
    WHILE           shift and go to state 24

    statement                      shift and go to state 13
    assignment                     shift and go to state 14
    if_statement                   shift and go to state 15
    write_statement                shift and go to state 16
    do_statement                   shift and go to state 17
    while_statement                shift and go to state 18
    do_until_statement             shift and go to state 19

state 7

    (2) declarations -> declarations declaration .

    INT             reduce using rule 2 (declarations -> declarations declaration .)
    FLOAT           reduce using rule 2 (declarations -> declarations declaration .)
    BOOL            reduce using rule 2 (declarations -> declarations declaration .)
    RBRACE          reduce using rule 2 (declarations -> declarations declaration .)
    IDENTIFIER      reduce using rule 2 (declarations -> declarations declaration .)
    IF              reduce using rule 2 (declarations -> declarations declaration .)
    WRITE           reduce using rule 2 (declarations -> declarations declaration .)
    DO              reduce using rule 2 (declarations -> declarations declaration .)
    WHILE           reduce using rule 2 (declarations -> declarations declaration .)


state 8

    (11) statements -> empty .

    RBRACE          reduce using rule 11 (statements -> empty .)
    IDENTIFIER      reduce using rule 11 (statements -> empty .)
    IF              reduce using rule 11 (statements -> empty .)
    WRITE           reduce using rule 11 (statements -> empty .)
    DO              reduce using rule 11 (statements -> empty .)
    WHILE           reduce using rule 11 (statements -> empty .)


state 9

    (4) declaration -> INT . var_list SEMICOLON
    (7) var_list -> . var_list COMMA IDENTIFIER
    (8) var_list -> . IDENTIFIER

    IDENTIFIER      shift and go to state 26

    var_list                       shift and go to state 25

state 10

    (5) declaration -> FLOAT . var_list SEMICOLON
    (7) var_list -> . var_list COMMA IDENTIFIER
    (8) var_list -> . IDENTIFIER

    IDENTIFIER      shift and go to state 26

    var_list                       shift and go to state 27

state 11

    (6) declaration -> BOOL . var_list SEMICOLON
    (7) var_list -> . var_list COMMA IDENTIFIER
    (8) var_list -> . IDENTIFIER

    IDENTIFIER      shift and go to state 26

    var_list                       shift and go to state 28

state 12

    (1) main -> MAIN LBRACE declarations statements RBRACE .

    $end            reduce using rule 1 (main -> MAIN LBRACE declarations statements RBRACE .)


state 13

    (10) statements -> statements statement .

    RBRACE          reduce using rule 10 (statements -> statements statement .)
    IDENTIFIER      reduce using rule 10 (statements -> statements statement .)
    IF              reduce using rule 10 (statements -> statements statement .)
    WRITE           reduce using rule 10 (statements -> statements statement .)
    DO              reduce using rule 10 (statements -> statements statement .)
    WHILE           reduce using rule 10 (statements -> statements statement .)


state 14

    (12) statement -> assignment .

    RBRACE          reduce using rule 12 (statement -> assignment .)
    IDENTIFIER      reduce using rule 12 (statement -> assignment .)
    IF              reduce using rule 12 (statement -> assignment .)
    WRITE           reduce using rule 12 (statement -> assignment .)
    DO              reduce using rule 12 (statement -> assignment .)
    WHILE           reduce using rule 12 (statement -> assignment .)


state 15

    (13) statement -> if_statement .

    RBRACE          reduce using rule 13 (statement -> if_statement .)
    IDENTIFIER      reduce using rule 13 (statement -> if_statement .)
    IF              reduce using rule 13 (statement -> if_statement .)
    WRITE           reduce using rule 13 (statement -> if_statement .)
    DO              reduce using rule 13 (statement -> if_statement .)
    WHILE           reduce using rule 13 (statement -> if_statement .)


state 16

    (14) statement -> write_statement .

    RBRACE          reduce using rule 14 (statement -> write_statement .)
    IDENTIFIER      reduce using rule 14 (statement -> write_statement .)
    IF              reduce using rule 14 (statement -> write_statement .)
    WRITE           reduce using rule 14 (statement -> write_statement .)
    DO              reduce using rule 14 (statement -> write_statement .)
    WHILE           reduce using rule 14 (statement -> write_statement .)


state 17

    (15) statement -> do_statement .

    RBRACE          reduce using rule 15 (statement -> do_statement .)
    IDENTIFIER      reduce using rule 15 (statement -> do_statement .)
    IF              reduce using rule 15 (statement -> do_statement .)
    WRITE           reduce using rule 15 (statement -> do_statement .)
    DO              reduce using rule 15 (statement -> do_statement .)
    WHILE           reduce using rule 15 (statement -> do_statement .)


state 18

    (16) statement -> while_statement .

    RBRACE          reduce using rule 16 (statement -> while_statement .)
    IDENTIFIER      reduce using rule 16 (statement -> while_statement .)
    IF              reduce using rule 16 (statement -> while_statement .)
    WRITE           reduce using rule 16 (statement -> while_statement .)
    DO              reduce using rule 16 (statement -> while_statement .)
    WHILE           reduce using rule 16 (statement -> while_statement .)


state 19

    (17) statement -> do_until_statement .

    RBRACE          reduce using rule 17 (statement -> do_until_statement .)
    IDENTIFIER      reduce using rule 17 (statement -> do_until_statement .)
    IF              reduce using rule 17 (statement -> do_until_statement .)
    WRITE           reduce using rule 17 (statement -> do_until_statement .)
    DO              reduce using rule 17 (statement -> do_until_statement .)
    WHILE           reduce using rule 17 (statement -> do_until_statement .)


state 20

    (18) assignment -> IDENTIFIER . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 29


state 21

    (19) if_statement -> IF . LPAREN condition RPAREN THEN LBRACE statements RBRACE ELSE LBRACE statements RBRACE FI
    (20) if_statement -> IF . LPAREN condition RPAREN THEN LBRACE statements RBRACE FI

    LPAREN          shift and go to state 30


state 22

    (21) write_statement -> WRITE . expression SEMICOLON
    (24) expression -> . expression PLUS term
    (25) expression -> . expression MINUS term
    (26) expression -> . term
    (44) expression -> . expression PLUS empty
    (45) expression -> . expression MINUS empty
    (27) term -> . term TIMES factor
    (28) term -> . term DIVIDE factor
    (29) term -> . factor
    (30) factor -> . LPAREN expression RPAREN
    (31) factor -> . NUMBER
    (32) factor -> . FLOAT_NUMBER
    (33) factor -> . IDENTIFIER
    (34) factor -> . BOOL_VALUE

    LPAREN          shift and go to state 34
    NUMBER          shift and go to state 35
    FLOAT_NUMBER    shift and go to state 36
    IDENTIFIER      shift and go to state 37
    BOOL_VALUE      shift and go to state 38

    expression                     shift and go to state 31
    term                           shift and go to state 32
    factor                         shift and go to state 33

state 23

    (22) do_statement -> DO . LBRACE statements RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (9) do_until_statement -> DO . LBRACE statements RBRACE UNTIL LPAREN condition RPAREN SEMICOLON

    LBRACE          shift and go to state 39


state 24

    (23) while_statement -> WHILE . LPAREN condition RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 40


state 25

    (4) declaration -> INT var_list . SEMICOLON
    (7) var_list -> var_list . COMMA IDENTIFIER

    SEMICOLON       shift and go to state 41
    COMMA           shift and go to state 42


state 26

    (8) var_list -> IDENTIFIER .

    SEMICOLON       reduce using rule 8 (var_list -> IDENTIFIER .)
    COMMA           reduce using rule 8 (var_list -> IDENTIFIER .)


state 27

    (5) declaration -> FLOAT var_list . SEMICOLON
    (7) var_list -> var_list . COMMA IDENTIFIER

    SEMICOLON       shift and go to state 43
    COMMA           shift and go to state 42


state 28

    (6) declaration -> BOOL var_list . SEMICOLON
    (7) var_list -> var_list . COMMA IDENTIFIER

    SEMICOLON       shift and go to state 44
    COMMA           shift and go to state 42


state 29

    (18) assignment -> IDENTIFIER ASSIGN . expression SEMICOLON
    (24) expression -> . expression PLUS term
    (25) expression -> . expression MINUS term
    (26) expression -> . term
    (44) expression -> . expression PLUS empty
    (45) expression -> . expression MINUS empty
    (27) term -> . term TIMES factor
    (28) term -> . term DIVIDE factor
    (29) term -> . factor
    (30) factor -> . LPAREN expression RPAREN
    (31) factor -> . NUMBER
    (32) factor -> . FLOAT_NUMBER
    (33) factor -> . IDENTIFIER
    (34) factor -> . BOOL_VALUE

    LPAREN          shift and go to state 34
    NUMBER          shift and go to state 35
    FLOAT_NUMBER    shift and go to state 36
    IDENTIFIER      shift and go to state 37
    BOOL_VALUE      shift and go to state 38

    expression                     shift and go to state 45
    term                           shift and go to state 32
    factor                         shift and go to state 33

state 30

    (19) if_statement -> IF LPAREN . condition RPAREN THEN LBRACE statements RBRACE ELSE LBRACE statements RBRACE FI
    (20) if_statement -> IF LPAREN . condition RPAREN THEN LBRACE statements RBRACE FI
    (35) condition -> . expression EQUALS expression
    (36) condition -> . expression NOTEQUALS expression
    (37) condition -> . expression LESS expression
    (38) condition -> . expression LESSEQUAL expression
    (39) condition -> . expression GREATER expression
    (40) condition -> . expression GREATEREQUAL expression
    (41) condition -> . expression AND expression
    (42) condition -> . expression OR expression
    (24) expression -> . expression PLUS term
    (25) expression -> . expression MINUS term
    (26) expression -> . term
    (44) expression -> . expression PLUS empty
    (45) expression -> . expression MINUS empty
    (27) term -> . term TIMES factor
    (28) term -> . term DIVIDE factor
    (29) term -> . factor
    (30) factor -> . LPAREN expression RPAREN
    (31) factor -> . NUMBER
    (32) factor -> . FLOAT_NUMBER
    (33) factor -> . IDENTIFIER
    (34) factor -> . BOOL_VALUE

    LPAREN          shift and go to state 34
    NUMBER          shift and go to state 35
    FLOAT_NUMBER    shift and go to state 36
    IDENTIFIER      shift and go to state 37
    BOOL_VALUE      shift and go to state 38

    condition                      shift and go to state 46
    expression                     shift and go to state 47
    term                           shift and go to state 32
    factor                         shift and go to state 33

state 31

    (21) write_statement -> WRITE expression . SEMICOLON
    (24) expression -> expression . PLUS term
    (25) expression -> expression . MINUS term
    (44) expression -> expression . PLUS empty
    (45) expression -> expression . MINUS empty

    SEMICOLON       shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50


state 32

    (26) expression -> term .
    (27) term -> term . TIMES factor
    (28) term -> term . DIVIDE factor

    SEMICOLON       reduce using rule 26 (expression -> term .)
    PLUS            reduce using rule 26 (expression -> term .)
    MINUS           reduce using rule 26 (expression -> term .)
    EQUALS          reduce using rule 26 (expression -> term .)
    NOTEQUALS       reduce using rule 26 (expression -> term .)
    LESS            reduce using rule 26 (expression -> term .)
    LESSEQUAL       reduce using rule 26 (expression -> term .)
    GREATER         reduce using rule 26 (expression -> term .)
    GREATEREQUAL    reduce using rule 26 (expression -> term .)
    AND             reduce using rule 26 (expression -> term .)
    OR              reduce using rule 26 (expression -> term .)
    RPAREN          reduce using rule 26 (expression -> term .)
    TIMES           shift and go to state 51
    DIVIDE          shift and go to state 52


state 33

    (29) term -> factor .

    TIMES           reduce using rule 29 (term -> factor .)
    DIVIDE          reduce using rule 29 (term -> factor .)
    SEMICOLON       reduce using rule 29 (term -> factor .)
    PLUS            reduce using rule 29 (term -> factor .)
    MINUS           reduce using rule 29 (term -> factor .)
    EQUALS          reduce using rule 29 (term -> factor .)
    NOTEQUALS       reduce using rule 29 (term -> factor .)
    LESS            reduce using rule 29 (term -> factor .)
    LESSEQUAL       reduce using rule 29 (term -> factor .)
    GREATER         reduce using rule 29 (term -> factor .)
    GREATEREQUAL    reduce using rule 29 (term -> factor .)
    AND             reduce using rule 29 (term -> factor .)
    OR              reduce using rule 29 (term -> factor .)
    RPAREN          reduce using rule 29 (term -> factor .)


state 34

    (30) factor -> LPAREN . expression RPAREN
    (24) expression -> . expression PLUS term
    (25) expression -> . expression MINUS term
    (26) expression -> . term
    (44) expression -> . expression PLUS empty
    (45) expression -> . expression MINUS empty
    (27) term -> . term TIMES factor
    (28) term -> . term DIVIDE factor
    (29) term -> . factor
    (30) factor -> . LPAREN expression RPAREN
    (31) factor -> . NUMBER
    (32) factor -> . FLOAT_NUMBER
    (33) factor -> . IDENTIFIER
    (34) factor -> . BOOL_VALUE

    LPAREN          shift and go to state 34
    NUMBER          shift and go to state 35
    FLOAT_NUMBER    shift and go to state 36
    IDENTIFIER      shift and go to state 37
    BOOL_VALUE      shift and go to state 38

    expression                     shift and go to state 53
    term                           shift and go to state 32
    factor                         shift and go to state 33

state 35

    (31) factor -> NUMBER .

    TIMES           reduce using rule 31 (factor -> NUMBER .)
    DIVIDE          reduce using rule 31 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 31 (factor -> NUMBER .)
    PLUS            reduce using rule 31 (factor -> NUMBER .)
    MINUS           reduce using rule 31 (factor -> NUMBER .)
    EQUALS          reduce using rule 31 (factor -> NUMBER .)
    NOTEQUALS       reduce using rule 31 (factor -> NUMBER .)
    LESS            reduce using rule 31 (factor -> NUMBER .)
    LESSEQUAL       reduce using rule 31 (factor -> NUMBER .)
    GREATER         reduce using rule 31 (factor -> NUMBER .)
    GREATEREQUAL    reduce using rule 31 (factor -> NUMBER .)
    AND             reduce using rule 31 (factor -> NUMBER .)
    OR              reduce using rule 31 (factor -> NUMBER .)
    RPAREN          reduce using rule 31 (factor -> NUMBER .)


state 36

    (32) factor -> FLOAT_NUMBER .

    TIMES           reduce using rule 32 (factor -> FLOAT_NUMBER .)
    DIVIDE          reduce using rule 32 (factor -> FLOAT_NUMBER .)
    SEMICOLON       reduce using rule 32 (factor -> FLOAT_NUMBER .)
    PLUS            reduce using rule 32 (factor -> FLOAT_NUMBER .)
    MINUS           reduce using rule 32 (factor -> FLOAT_NUMBER .)
    EQUALS          reduce using rule 32 (factor -> FLOAT_NUMBER .)
    NOTEQUALS       reduce using rule 32 (factor -> FLOAT_NUMBER .)
    LESS            reduce using rule 32 (factor -> FLOAT_NUMBER .)
    LESSEQUAL       reduce using rule 32 (factor -> FLOAT_NUMBER .)
    GREATER         reduce using rule 32 (factor -> FLOAT_NUMBER .)
    GREATEREQUAL    reduce using rule 32 (factor -> FLOAT_NUMBER .)
    AND             reduce using rule 32 (factor -> FLOAT_NUMBER .)
    OR              reduce using rule 32 (factor -> FLOAT_NUMBER .)
    RPAREN          reduce using rule 32 (factor -> FLOAT_NUMBER .)


state 37

    (33) factor -> IDENTIFIER .

    TIMES           reduce using rule 33 (factor -> IDENTIFIER .)
    DIVIDE          reduce using rule 33 (factor -> IDENTIFIER .)
    SEMICOLON       reduce using rule 33 (factor -> IDENTIFIER .)
    PLUS            reduce using rule 33 (factor -> IDENTIFIER .)
    MINUS           reduce using rule 33 (factor -> IDENTIFIER .)
    EQUALS          reduce using rule 33 (factor -> IDENTIFIER .)
    NOTEQUALS       reduce using rule 33 (factor -> IDENTIFIER .)
    LESS            reduce using rule 33 (factor -> IDENTIFIER .)
    LESSEQUAL       reduce using rule 33 (factor -> IDENTIFIER .)
    GREATER         reduce using rule 33 (factor -> IDENTIFIER .)
    GREATEREQUAL    reduce using rule 33 (factor -> IDENTIFIER .)
    AND             reduce using rule 33 (factor -> IDENTIFIER .)
    OR              reduce using rule 33 (factor -> IDENTIFIER .)
    RPAREN          reduce using rule 33 (factor -> IDENTIFIER .)


state 38

    (34) factor -> BOOL_VALUE .

    TIMES           reduce using rule 34 (factor -> BOOL_VALUE .)
    DIVIDE          reduce using rule 34 (factor -> BOOL_VALUE .)
    SEMICOLON       reduce using rule 34 (factor -> BOOL_VALUE .)
    PLUS            reduce using rule 34 (factor -> BOOL_VALUE .)
    MINUS           reduce using rule 34 (factor -> BOOL_VALUE .)
    EQUALS          reduce using rule 34 (factor -> BOOL_VALUE .)
    NOTEQUALS       reduce using rule 34 (factor -> BOOL_VALUE .)
    LESS            reduce using rule 34 (factor -> BOOL_VALUE .)
    LESSEQUAL       reduce using rule 34 (factor -> BOOL_VALUE .)
    GREATER         reduce using rule 34 (factor -> BOOL_VALUE .)
    GREATEREQUAL    reduce using rule 34 (factor -> BOOL_VALUE .)
    AND             reduce using rule 34 (factor -> BOOL_VALUE .)
    OR              reduce using rule 34 (factor -> BOOL_VALUE .)
    RPAREN          reduce using rule 34 (factor -> BOOL_VALUE .)


state 39

    (22) do_statement -> DO LBRACE . statements RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (9) do_until_statement -> DO LBRACE . statements RBRACE UNTIL LPAREN condition RPAREN SEMICOLON
    (10) statements -> . statements statement
    (11) statements -> . empty
    (43) empty -> .

    RBRACE          reduce using rule 43 (empty -> .)
    IDENTIFIER      reduce using rule 43 (empty -> .)
    IF              reduce using rule 43 (empty -> .)
    WRITE           reduce using rule 43 (empty -> .)
    DO              reduce using rule 43 (empty -> .)
    WHILE           reduce using rule 43 (empty -> .)

    statements                     shift and go to state 54
    empty                          shift and go to state 8

state 40

    (23) while_statement -> WHILE LPAREN . condition RPAREN LBRACE statements RBRACE
    (35) condition -> . expression EQUALS expression
    (36) condition -> . expression NOTEQUALS expression
    (37) condition -> . expression LESS expression
    (38) condition -> . expression LESSEQUAL expression
    (39) condition -> . expression GREATER expression
    (40) condition -> . expression GREATEREQUAL expression
    (41) condition -> . expression AND expression
    (42) condition -> . expression OR expression
    (24) expression -> . expression PLUS term
    (25) expression -> . expression MINUS term
    (26) expression -> . term
    (44) expression -> . expression PLUS empty
    (45) expression -> . expression MINUS empty
    (27) term -> . term TIMES factor
    (28) term -> . term DIVIDE factor
    (29) term -> . factor
    (30) factor -> . LPAREN expression RPAREN
    (31) factor -> . NUMBER
    (32) factor -> . FLOAT_NUMBER
    (33) factor -> . IDENTIFIER
    (34) factor -> . BOOL_VALUE

    LPAREN          shift and go to state 34
    NUMBER          shift and go to state 35
    FLOAT_NUMBER    shift and go to state 36
    IDENTIFIER      shift and go to state 37
    BOOL_VALUE      shift and go to state 38

    condition                      shift and go to state 55
    expression                     shift and go to state 47
    term                           shift and go to state 32
    factor                         shift and go to state 33

state 41

    (4) declaration -> INT var_list SEMICOLON .

    INT             reduce using rule 4 (declaration -> INT var_list SEMICOLON .)
    FLOAT           reduce using rule 4 (declaration -> INT var_list SEMICOLON .)
    BOOL            reduce using rule 4 (declaration -> INT var_list SEMICOLON .)
    RBRACE          reduce using rule 4 (declaration -> INT var_list SEMICOLON .)
    IDENTIFIER      reduce using rule 4 (declaration -> INT var_list SEMICOLON .)
    IF              reduce using rule 4 (declaration -> INT var_list SEMICOLON .)
    WRITE           reduce using rule 4 (declaration -> INT var_list SEMICOLON .)
    DO              reduce using rule 4 (declaration -> INT var_list SEMICOLON .)
    WHILE           reduce using rule 4 (declaration -> INT var_list SEMICOLON .)


state 42

    (7) var_list -> var_list COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 56


state 43

    (5) declaration -> FLOAT var_list SEMICOLON .

    INT             reduce using rule 5 (declaration -> FLOAT var_list SEMICOLON .)
    FLOAT           reduce using rule 5 (declaration -> FLOAT var_list SEMICOLON .)
    BOOL            reduce using rule 5 (declaration -> FLOAT var_list SEMICOLON .)
    RBRACE          reduce using rule 5 (declaration -> FLOAT var_list SEMICOLON .)
    IDENTIFIER      reduce using rule 5 (declaration -> FLOAT var_list SEMICOLON .)
    IF              reduce using rule 5 (declaration -> FLOAT var_list SEMICOLON .)
    WRITE           reduce using rule 5 (declaration -> FLOAT var_list SEMICOLON .)
    DO              reduce using rule 5 (declaration -> FLOAT var_list SEMICOLON .)
    WHILE           reduce using rule 5 (declaration -> FLOAT var_list SEMICOLON .)


state 44

    (6) declaration -> BOOL var_list SEMICOLON .

    INT             reduce using rule 6 (declaration -> BOOL var_list SEMICOLON .)
    FLOAT           reduce using rule 6 (declaration -> BOOL var_list SEMICOLON .)
    BOOL            reduce using rule 6 (declaration -> BOOL var_list SEMICOLON .)
    RBRACE          reduce using rule 6 (declaration -> BOOL var_list SEMICOLON .)
    IDENTIFIER      reduce using rule 6 (declaration -> BOOL var_list SEMICOLON .)
    IF              reduce using rule 6 (declaration -> BOOL var_list SEMICOLON .)
    WRITE           reduce using rule 6 (declaration -> BOOL var_list SEMICOLON .)
    DO              reduce using rule 6 (declaration -> BOOL var_list SEMICOLON .)
    WHILE           reduce using rule 6 (declaration -> BOOL var_list SEMICOLON .)


state 45

    (18) assignment -> IDENTIFIER ASSIGN expression . SEMICOLON
    (24) expression -> expression . PLUS term
    (25) expression -> expression . MINUS term
    (44) expression -> expression . PLUS empty
    (45) expression -> expression . MINUS empty

    SEMICOLON       shift and go to state 57
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50


state 46

    (19) if_statement -> IF LPAREN condition . RPAREN THEN LBRACE statements RBRACE ELSE LBRACE statements RBRACE FI
    (20) if_statement -> IF LPAREN condition . RPAREN THEN LBRACE statements RBRACE FI

    RPAREN          shift and go to state 58


state 47

    (35) condition -> expression . EQUALS expression
    (36) condition -> expression . NOTEQUALS expression
    (37) condition -> expression . LESS expression
    (38) condition -> expression . LESSEQUAL expression
    (39) condition -> expression . GREATER expression
    (40) condition -> expression . GREATEREQUAL expression
    (41) condition -> expression . AND expression
    (42) condition -> expression . OR expression
    (24) expression -> expression . PLUS term
    (25) expression -> expression . MINUS term
    (44) expression -> expression . PLUS empty
    (45) expression -> expression . MINUS empty

    EQUALS          shift and go to state 59
    NOTEQUALS       shift and go to state 60
    LESS            shift and go to state 61
    LESSEQUAL       shift and go to state 62
    GREATER         shift and go to state 63
    GREATEREQUAL    shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50


state 48

    (21) write_statement -> WRITE expression SEMICOLON .

    RBRACE          reduce using rule 21 (write_statement -> WRITE expression SEMICOLON .)
    IDENTIFIER      reduce using rule 21 (write_statement -> WRITE expression SEMICOLON .)
    IF              reduce using rule 21 (write_statement -> WRITE expression SEMICOLON .)
    WRITE           reduce using rule 21 (write_statement -> WRITE expression SEMICOLON .)
    DO              reduce using rule 21 (write_statement -> WRITE expression SEMICOLON .)
    WHILE           reduce using rule 21 (write_statement -> WRITE expression SEMICOLON .)


state 49

    (24) expression -> expression PLUS . term
    (44) expression -> expression PLUS . empty
    (27) term -> . term TIMES factor
    (28) term -> . term DIVIDE factor
    (29) term -> . factor
    (43) empty -> .
    (30) factor -> . LPAREN expression RPAREN
    (31) factor -> . NUMBER
    (32) factor -> . FLOAT_NUMBER
    (33) factor -> . IDENTIFIER
    (34) factor -> . BOOL_VALUE

    SEMICOLON       reduce using rule 43 (empty -> .)
    PLUS            reduce using rule 43 (empty -> .)
    MINUS           reduce using rule 43 (empty -> .)
    EQUALS          reduce using rule 43 (empty -> .)
    NOTEQUALS       reduce using rule 43 (empty -> .)
    LESS            reduce using rule 43 (empty -> .)
    LESSEQUAL       reduce using rule 43 (empty -> .)
    GREATER         reduce using rule 43 (empty -> .)
    GREATEREQUAL    reduce using rule 43 (empty -> .)
    AND             reduce using rule 43 (empty -> .)
    OR              reduce using rule 43 (empty -> .)
    RPAREN          reduce using rule 43 (empty -> .)
    LPAREN          shift and go to state 34
    NUMBER          shift and go to state 35
    FLOAT_NUMBER    shift and go to state 36
    IDENTIFIER      shift and go to state 37
    BOOL_VALUE      shift and go to state 38

    term                           shift and go to state 67
    empty                          shift and go to state 68
    factor                         shift and go to state 33

state 50

    (25) expression -> expression MINUS . term
    (45) expression -> expression MINUS . empty
    (27) term -> . term TIMES factor
    (28) term -> . term DIVIDE factor
    (29) term -> . factor
    (43) empty -> .
    (30) factor -> . LPAREN expression RPAREN
    (31) factor -> . NUMBER
    (32) factor -> . FLOAT_NUMBER
    (33) factor -> . IDENTIFIER
    (34) factor -> . BOOL_VALUE

    SEMICOLON       reduce using rule 43 (empty -> .)
    PLUS            reduce using rule 43 (empty -> .)
    MINUS           reduce using rule 43 (empty -> .)
    EQUALS          reduce using rule 43 (empty -> .)
    NOTEQUALS       reduce using rule 43 (empty -> .)
    LESS            reduce using rule 43 (empty -> .)
    LESSEQUAL       reduce using rule 43 (empty -> .)
    GREATER         reduce using rule 43 (empty -> .)
    GREATEREQUAL    reduce using rule 43 (empty -> .)
    AND             reduce using rule 43 (empty -> .)
    OR              reduce using rule 43 (empty -> .)
    RPAREN          reduce using rule 43 (empty -> .)
    LPAREN          shift and go to state 34
    NUMBER          shift and go to state 35
    FLOAT_NUMBER    shift and go to state 36
    IDENTIFIER      shift and go to state 37
    BOOL_VALUE      shift and go to state 38

    term                           shift and go to state 69
    empty                          shift and go to state 70
    factor                         shift and go to state 33

state 51

    (27) term -> term TIMES . factor
    (30) factor -> . LPAREN expression RPAREN
    (31) factor -> . NUMBER
    (32) factor -> . FLOAT_NUMBER
    (33) factor -> . IDENTIFIER
    (34) factor -> . BOOL_VALUE

    LPAREN          shift and go to state 34
    NUMBER          shift and go to state 35
    FLOAT_NUMBER    shift and go to state 36
    IDENTIFIER      shift and go to state 37
    BOOL_VALUE      shift and go to state 38

    factor                         shift and go to state 71

state 52

    (28) term -> term DIVIDE . factor
    (30) factor -> . LPAREN expression RPAREN
    (31) factor -> . NUMBER
    (32) factor -> . FLOAT_NUMBER
    (33) factor -> . IDENTIFIER
    (34) factor -> . BOOL_VALUE

    LPAREN          shift and go to state 34
    NUMBER          shift and go to state 35
    FLOAT_NUMBER    shift and go to state 36
    IDENTIFIER      shift and go to state 37
    BOOL_VALUE      shift and go to state 38

    factor                         shift and go to state 72

state 53

    (30) factor -> LPAREN expression . RPAREN
    (24) expression -> expression . PLUS term
    (25) expression -> expression . MINUS term
    (44) expression -> expression . PLUS empty
    (45) expression -> expression . MINUS empty

    RPAREN          shift and go to state 73
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50


state 54

    (22) do_statement -> DO LBRACE statements . RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (9) do_until_statement -> DO LBRACE statements . RBRACE UNTIL LPAREN condition RPAREN SEMICOLON
    (10) statements -> statements . statement
    (12) statement -> . assignment
    (13) statement -> . if_statement
    (14) statement -> . write_statement
    (15) statement -> . do_statement
    (16) statement -> . while_statement
    (17) statement -> . do_until_statement
    (18) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (19) if_statement -> . IF LPAREN condition RPAREN THEN LBRACE statements RBRACE ELSE LBRACE statements RBRACE FI
    (20) if_statement -> . IF LPAREN condition RPAREN THEN LBRACE statements RBRACE FI
    (21) write_statement -> . WRITE expression SEMICOLON
    (22) do_statement -> . DO LBRACE statements RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (23) while_statement -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (9) do_until_statement -> . DO LBRACE statements RBRACE UNTIL LPAREN condition RPAREN SEMICOLON

    RBRACE          shift and go to state 74
    IDENTIFIER      shift and go to state 20
    IF              shift and go to state 21
    WRITE           shift and go to state 22
    DO              shift and go to state 23
    WHILE           shift and go to state 24

    statement                      shift and go to state 13
    assignment                     shift and go to state 14
    if_statement                   shift and go to state 15
    write_statement                shift and go to state 16
    do_statement                   shift and go to state 17
    while_statement                shift and go to state 18
    do_until_statement             shift and go to state 19

state 55

    (23) while_statement -> WHILE LPAREN condition . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 75


state 56

    (7) var_list -> var_list COMMA IDENTIFIER .

    SEMICOLON       reduce using rule 7 (var_list -> var_list COMMA IDENTIFIER .)
    COMMA           reduce using rule 7 (var_list -> var_list COMMA IDENTIFIER .)


state 57

    (18) assignment -> IDENTIFIER ASSIGN expression SEMICOLON .

    RBRACE          reduce using rule 18 (assignment -> IDENTIFIER ASSIGN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 18 (assignment -> IDENTIFIER ASSIGN expression SEMICOLON .)
    IF              reduce using rule 18 (assignment -> IDENTIFIER ASSIGN expression SEMICOLON .)
    WRITE           reduce using rule 18 (assignment -> IDENTIFIER ASSIGN expression SEMICOLON .)
    DO              reduce using rule 18 (assignment -> IDENTIFIER ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 18 (assignment -> IDENTIFIER ASSIGN expression SEMICOLON .)


state 58

    (19) if_statement -> IF LPAREN condition RPAREN . THEN LBRACE statements RBRACE ELSE LBRACE statements RBRACE FI
    (20) if_statement -> IF LPAREN condition RPAREN . THEN LBRACE statements RBRACE FI

    THEN            shift and go to state 76


state 59

    (35) condition -> expression EQUALS . expression
    (24) expression -> . expression PLUS term
    (25) expression -> . expression MINUS term
    (26) expression -> . term
    (44) expression -> . expression PLUS empty
    (45) expression -> . expression MINUS empty
    (27) term -> . term TIMES factor
    (28) term -> . term DIVIDE factor
    (29) term -> . factor
    (30) factor -> . LPAREN expression RPAREN
    (31) factor -> . NUMBER
    (32) factor -> . FLOAT_NUMBER
    (33) factor -> . IDENTIFIER
    (34) factor -> . BOOL_VALUE

    LPAREN          shift and go to state 34
    NUMBER          shift and go to state 35
    FLOAT_NUMBER    shift and go to state 36
    IDENTIFIER      shift and go to state 37
    BOOL_VALUE      shift and go to state 38

    expression                     shift and go to state 77
    term                           shift and go to state 32
    factor                         shift and go to state 33

state 60

    (36) condition -> expression NOTEQUALS . expression
    (24) expression -> . expression PLUS term
    (25) expression -> . expression MINUS term
    (26) expression -> . term
    (44) expression -> . expression PLUS empty
    (45) expression -> . expression MINUS empty
    (27) term -> . term TIMES factor
    (28) term -> . term DIVIDE factor
    (29) term -> . factor
    (30) factor -> . LPAREN expression RPAREN
    (31) factor -> . NUMBER
    (32) factor -> . FLOAT_NUMBER
    (33) factor -> . IDENTIFIER
    (34) factor -> . BOOL_VALUE

    LPAREN          shift and go to state 34
    NUMBER          shift and go to state 35
    FLOAT_NUMBER    shift and go to state 36
    IDENTIFIER      shift and go to state 37
    BOOL_VALUE      shift and go to state 38

    expression                     shift and go to state 78
    term                           shift and go to state 32
    factor                         shift and go to state 33

state 61

    (37) condition -> expression LESS . expression
    (24) expression -> . expression PLUS term
    (25) expression -> . expression MINUS term
    (26) expression -> . term
    (44) expression -> . expression PLUS empty
    (45) expression -> . expression MINUS empty
    (27) term -> . term TIMES factor
    (28) term -> . term DIVIDE factor
    (29) term -> . factor
    (30) factor -> . LPAREN expression RPAREN
    (31) factor -> . NUMBER
    (32) factor -> . FLOAT_NUMBER
    (33) factor -> . IDENTIFIER
    (34) factor -> . BOOL_VALUE

    LPAREN          shift and go to state 34
    NUMBER          shift and go to state 35
    FLOAT_NUMBER    shift and go to state 36
    IDENTIFIER      shift and go to state 37
    BOOL_VALUE      shift and go to state 38

    expression                     shift and go to state 79
    term                           shift and go to state 32
    factor                         shift and go to state 33

state 62

    (38) condition -> expression LESSEQUAL . expression
    (24) expression -> . expression PLUS term
    (25) expression -> . expression MINUS term
    (26) expression -> . term
    (44) expression -> . expression PLUS empty
    (45) expression -> . expression MINUS empty
    (27) term -> . term TIMES factor
    (28) term -> . term DIVIDE factor
    (29) term -> . factor
    (30) factor -> . LPAREN expression RPAREN
    (31) factor -> . NUMBER
    (32) factor -> . FLOAT_NUMBER
    (33) factor -> . IDENTIFIER
    (34) factor -> . BOOL_VALUE

    LPAREN          shift and go to state 34
    NUMBER          shift and go to state 35
    FLOAT_NUMBER    shift and go to state 36
    IDENTIFIER      shift and go to state 37
    BOOL_VALUE      shift and go to state 38

    expression                     shift and go to state 80
    term                           shift and go to state 32
    factor                         shift and go to state 33

state 63

    (39) condition -> expression GREATER . expression
    (24) expression -> . expression PLUS term
    (25) expression -> . expression MINUS term
    (26) expression -> . term
    (44) expression -> . expression PLUS empty
    (45) expression -> . expression MINUS empty
    (27) term -> . term TIMES factor
    (28) term -> . term DIVIDE factor
    (29) term -> . factor
    (30) factor -> . LPAREN expression RPAREN
    (31) factor -> . NUMBER
    (32) factor -> . FLOAT_NUMBER
    (33) factor -> . IDENTIFIER
    (34) factor -> . BOOL_VALUE

    LPAREN          shift and go to state 34
    NUMBER          shift and go to state 35
    FLOAT_NUMBER    shift and go to state 36
    IDENTIFIER      shift and go to state 37
    BOOL_VALUE      shift and go to state 38

    expression                     shift and go to state 81
    term                           shift and go to state 32
    factor                         shift and go to state 33

state 64

    (40) condition -> expression GREATEREQUAL . expression
    (24) expression -> . expression PLUS term
    (25) expression -> . expression MINUS term
    (26) expression -> . term
    (44) expression -> . expression PLUS empty
    (45) expression -> . expression MINUS empty
    (27) term -> . term TIMES factor
    (28) term -> . term DIVIDE factor
    (29) term -> . factor
    (30) factor -> . LPAREN expression RPAREN
    (31) factor -> . NUMBER
    (32) factor -> . FLOAT_NUMBER
    (33) factor -> . IDENTIFIER
    (34) factor -> . BOOL_VALUE

    LPAREN          shift and go to state 34
    NUMBER          shift and go to state 35
    FLOAT_NUMBER    shift and go to state 36
    IDENTIFIER      shift and go to state 37
    BOOL_VALUE      shift and go to state 38

    expression                     shift and go to state 82
    term                           shift and go to state 32
    factor                         shift and go to state 33

state 65

    (41) condition -> expression AND . expression
    (24) expression -> . expression PLUS term
    (25) expression -> . expression MINUS term
    (26) expression -> . term
    (44) expression -> . expression PLUS empty
    (45) expression -> . expression MINUS empty
    (27) term -> . term TIMES factor
    (28) term -> . term DIVIDE factor
    (29) term -> . factor
    (30) factor -> . LPAREN expression RPAREN
    (31) factor -> . NUMBER
    (32) factor -> . FLOAT_NUMBER
    (33) factor -> . IDENTIFIER
    (34) factor -> . BOOL_VALUE

    LPAREN          shift and go to state 34
    NUMBER          shift and go to state 35
    FLOAT_NUMBER    shift and go to state 36
    IDENTIFIER      shift and go to state 37
    BOOL_VALUE      shift and go to state 38

    expression                     shift and go to state 83
    term                           shift and go to state 32
    factor                         shift and go to state 33

state 66

    (42) condition -> expression OR . expression
    (24) expression -> . expression PLUS term
    (25) expression -> . expression MINUS term
    (26) expression -> . term
    (44) expression -> . expression PLUS empty
    (45) expression -> . expression MINUS empty
    (27) term -> . term TIMES factor
    (28) term -> . term DIVIDE factor
    (29) term -> . factor
    (30) factor -> . LPAREN expression RPAREN
    (31) factor -> . NUMBER
    (32) factor -> . FLOAT_NUMBER
    (33) factor -> . IDENTIFIER
    (34) factor -> . BOOL_VALUE

    LPAREN          shift and go to state 34
    NUMBER          shift and go to state 35
    FLOAT_NUMBER    shift and go to state 36
    IDENTIFIER      shift and go to state 37
    BOOL_VALUE      shift and go to state 38

    expression                     shift and go to state 84
    term                           shift and go to state 32
    factor                         shift and go to state 33

state 67

    (24) expression -> expression PLUS term .
    (27) term -> term . TIMES factor
    (28) term -> term . DIVIDE factor

    SEMICOLON       reduce using rule 24 (expression -> expression PLUS term .)
    PLUS            reduce using rule 24 (expression -> expression PLUS term .)
    MINUS           reduce using rule 24 (expression -> expression PLUS term .)
    EQUALS          reduce using rule 24 (expression -> expression PLUS term .)
    NOTEQUALS       reduce using rule 24 (expression -> expression PLUS term .)
    LESS            reduce using rule 24 (expression -> expression PLUS term .)
    LESSEQUAL       reduce using rule 24 (expression -> expression PLUS term .)
    GREATER         reduce using rule 24 (expression -> expression PLUS term .)
    GREATEREQUAL    reduce using rule 24 (expression -> expression PLUS term .)
    AND             reduce using rule 24 (expression -> expression PLUS term .)
    OR              reduce using rule 24 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 24 (expression -> expression PLUS term .)
    TIMES           shift and go to state 51
    DIVIDE          shift and go to state 52


state 68

    (44) expression -> expression PLUS empty .

    SEMICOLON       reduce using rule 44 (expression -> expression PLUS empty .)
    PLUS            reduce using rule 44 (expression -> expression PLUS empty .)
    MINUS           reduce using rule 44 (expression -> expression PLUS empty .)
    EQUALS          reduce using rule 44 (expression -> expression PLUS empty .)
    NOTEQUALS       reduce using rule 44 (expression -> expression PLUS empty .)
    LESS            reduce using rule 44 (expression -> expression PLUS empty .)
    LESSEQUAL       reduce using rule 44 (expression -> expression PLUS empty .)
    GREATER         reduce using rule 44 (expression -> expression PLUS empty .)
    GREATEREQUAL    reduce using rule 44 (expression -> expression PLUS empty .)
    AND             reduce using rule 44 (expression -> expression PLUS empty .)
    OR              reduce using rule 44 (expression -> expression PLUS empty .)
    RPAREN          reduce using rule 44 (expression -> expression PLUS empty .)


state 69

    (25) expression -> expression MINUS term .
    (27) term -> term . TIMES factor
    (28) term -> term . DIVIDE factor

    SEMICOLON       reduce using rule 25 (expression -> expression MINUS term .)
    PLUS            reduce using rule 25 (expression -> expression MINUS term .)
    MINUS           reduce using rule 25 (expression -> expression MINUS term .)
    EQUALS          reduce using rule 25 (expression -> expression MINUS term .)
    NOTEQUALS       reduce using rule 25 (expression -> expression MINUS term .)
    LESS            reduce using rule 25 (expression -> expression MINUS term .)
    LESSEQUAL       reduce using rule 25 (expression -> expression MINUS term .)
    GREATER         reduce using rule 25 (expression -> expression MINUS term .)
    GREATEREQUAL    reduce using rule 25 (expression -> expression MINUS term .)
    AND             reduce using rule 25 (expression -> expression MINUS term .)
    OR              reduce using rule 25 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 25 (expression -> expression MINUS term .)
    TIMES           shift and go to state 51
    DIVIDE          shift and go to state 52


state 70

    (45) expression -> expression MINUS empty .

    SEMICOLON       reduce using rule 45 (expression -> expression MINUS empty .)
    PLUS            reduce using rule 45 (expression -> expression MINUS empty .)
    MINUS           reduce using rule 45 (expression -> expression MINUS empty .)
    EQUALS          reduce using rule 45 (expression -> expression MINUS empty .)
    NOTEQUALS       reduce using rule 45 (expression -> expression MINUS empty .)
    LESS            reduce using rule 45 (expression -> expression MINUS empty .)
    LESSEQUAL       reduce using rule 45 (expression -> expression MINUS empty .)
    GREATER         reduce using rule 45 (expression -> expression MINUS empty .)
    GREATEREQUAL    reduce using rule 45 (expression -> expression MINUS empty .)
    AND             reduce using rule 45 (expression -> expression MINUS empty .)
    OR              reduce using rule 45 (expression -> expression MINUS empty .)
    RPAREN          reduce using rule 45 (expression -> expression MINUS empty .)


state 71

    (27) term -> term TIMES factor .

    TIMES           reduce using rule 27 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 27 (term -> term TIMES factor .)
    SEMICOLON       reduce using rule 27 (term -> term TIMES factor .)
    PLUS            reduce using rule 27 (term -> term TIMES factor .)
    MINUS           reduce using rule 27 (term -> term TIMES factor .)
    EQUALS          reduce using rule 27 (term -> term TIMES factor .)
    NOTEQUALS       reduce using rule 27 (term -> term TIMES factor .)
    LESS            reduce using rule 27 (term -> term TIMES factor .)
    LESSEQUAL       reduce using rule 27 (term -> term TIMES factor .)
    GREATER         reduce using rule 27 (term -> term TIMES factor .)
    GREATEREQUAL    reduce using rule 27 (term -> term TIMES factor .)
    AND             reduce using rule 27 (term -> term TIMES factor .)
    OR              reduce using rule 27 (term -> term TIMES factor .)
    RPAREN          reduce using rule 27 (term -> term TIMES factor .)


state 72

    (28) term -> term DIVIDE factor .

    TIMES           reduce using rule 28 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 28 (term -> term DIVIDE factor .)
    SEMICOLON       reduce using rule 28 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 28 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 28 (term -> term DIVIDE factor .)
    EQUALS          reduce using rule 28 (term -> term DIVIDE factor .)
    NOTEQUALS       reduce using rule 28 (term -> term DIVIDE factor .)
    LESS            reduce using rule 28 (term -> term DIVIDE factor .)
    LESSEQUAL       reduce using rule 28 (term -> term DIVIDE factor .)
    GREATER         reduce using rule 28 (term -> term DIVIDE factor .)
    GREATEREQUAL    reduce using rule 28 (term -> term DIVIDE factor .)
    AND             reduce using rule 28 (term -> term DIVIDE factor .)
    OR              reduce using rule 28 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 28 (term -> term DIVIDE factor .)


state 73

    (30) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 30 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 30 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 30 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 30 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 30 (factor -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 30 (factor -> LPAREN expression RPAREN .)
    NOTEQUALS       reduce using rule 30 (factor -> LPAREN expression RPAREN .)
    LESS            reduce using rule 30 (factor -> LPAREN expression RPAREN .)
    LESSEQUAL       reduce using rule 30 (factor -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 30 (factor -> LPAREN expression RPAREN .)
    GREATEREQUAL    reduce using rule 30 (factor -> LPAREN expression RPAREN .)
    AND             reduce using rule 30 (factor -> LPAREN expression RPAREN .)
    OR              reduce using rule 30 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 30 (factor -> LPAREN expression RPAREN .)


state 74

    (22) do_statement -> DO LBRACE statements RBRACE . WHILE LPAREN condition RPAREN SEMICOLON
    (9) do_until_statement -> DO LBRACE statements RBRACE . UNTIL LPAREN condition RPAREN SEMICOLON

    WHILE           shift and go to state 85
    UNTIL           shift and go to state 86


state 75

    (23) while_statement -> WHILE LPAREN condition RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 87


state 76

    (19) if_statement -> IF LPAREN condition RPAREN THEN . LBRACE statements RBRACE ELSE LBRACE statements RBRACE FI
    (20) if_statement -> IF LPAREN condition RPAREN THEN . LBRACE statements RBRACE FI

    LBRACE          shift and go to state 88


state 77

    (35) condition -> expression EQUALS expression .
    (24) expression -> expression . PLUS term
    (25) expression -> expression . MINUS term
    (44) expression -> expression . PLUS empty
    (45) expression -> expression . MINUS empty

    RPAREN          reduce using rule 35 (condition -> expression EQUALS expression .)
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50


state 78

    (36) condition -> expression NOTEQUALS expression .
    (24) expression -> expression . PLUS term
    (25) expression -> expression . MINUS term
    (44) expression -> expression . PLUS empty
    (45) expression -> expression . MINUS empty

    RPAREN          reduce using rule 36 (condition -> expression NOTEQUALS expression .)
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50


state 79

    (37) condition -> expression LESS expression .
    (24) expression -> expression . PLUS term
    (25) expression -> expression . MINUS term
    (44) expression -> expression . PLUS empty
    (45) expression -> expression . MINUS empty

    RPAREN          reduce using rule 37 (condition -> expression LESS expression .)
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50


state 80

    (38) condition -> expression LESSEQUAL expression .
    (24) expression -> expression . PLUS term
    (25) expression -> expression . MINUS term
    (44) expression -> expression . PLUS empty
    (45) expression -> expression . MINUS empty

    RPAREN          reduce using rule 38 (condition -> expression LESSEQUAL expression .)
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50


state 81

    (39) condition -> expression GREATER expression .
    (24) expression -> expression . PLUS term
    (25) expression -> expression . MINUS term
    (44) expression -> expression . PLUS empty
    (45) expression -> expression . MINUS empty

    RPAREN          reduce using rule 39 (condition -> expression GREATER expression .)
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50


state 82

    (40) condition -> expression GREATEREQUAL expression .
    (24) expression -> expression . PLUS term
    (25) expression -> expression . MINUS term
    (44) expression -> expression . PLUS empty
    (45) expression -> expression . MINUS empty

    RPAREN          reduce using rule 40 (condition -> expression GREATEREQUAL expression .)
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50


state 83

    (41) condition -> expression AND expression .
    (24) expression -> expression . PLUS term
    (25) expression -> expression . MINUS term
    (44) expression -> expression . PLUS empty
    (45) expression -> expression . MINUS empty

    RPAREN          reduce using rule 41 (condition -> expression AND expression .)
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50


state 84

    (42) condition -> expression OR expression .
    (24) expression -> expression . PLUS term
    (25) expression -> expression . MINUS term
    (44) expression -> expression . PLUS empty
    (45) expression -> expression . MINUS empty

    RPAREN          reduce using rule 42 (condition -> expression OR expression .)
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50


state 85

    (22) do_statement -> DO LBRACE statements RBRACE WHILE . LPAREN condition RPAREN SEMICOLON

    LPAREN          shift and go to state 89


state 86

    (9) do_until_statement -> DO LBRACE statements RBRACE UNTIL . LPAREN condition RPAREN SEMICOLON

    LPAREN          shift and go to state 90


state 87

    (23) while_statement -> WHILE LPAREN condition RPAREN LBRACE . statements RBRACE
    (10) statements -> . statements statement
    (11) statements -> . empty
    (43) empty -> .

    RBRACE          reduce using rule 43 (empty -> .)
    IDENTIFIER      reduce using rule 43 (empty -> .)
    IF              reduce using rule 43 (empty -> .)
    WRITE           reduce using rule 43 (empty -> .)
    DO              reduce using rule 43 (empty -> .)
    WHILE           reduce using rule 43 (empty -> .)

    statements                     shift and go to state 91
    empty                          shift and go to state 8

state 88

    (19) if_statement -> IF LPAREN condition RPAREN THEN LBRACE . statements RBRACE ELSE LBRACE statements RBRACE FI
    (20) if_statement -> IF LPAREN condition RPAREN THEN LBRACE . statements RBRACE FI
    (10) statements -> . statements statement
    (11) statements -> . empty
    (43) empty -> .

    RBRACE          reduce using rule 43 (empty -> .)
    IDENTIFIER      reduce using rule 43 (empty -> .)
    IF              reduce using rule 43 (empty -> .)
    WRITE           reduce using rule 43 (empty -> .)
    DO              reduce using rule 43 (empty -> .)
    WHILE           reduce using rule 43 (empty -> .)

    statements                     shift and go to state 92
    empty                          shift and go to state 8

state 89

    (22) do_statement -> DO LBRACE statements RBRACE WHILE LPAREN . condition RPAREN SEMICOLON
    (35) condition -> . expression EQUALS expression
    (36) condition -> . expression NOTEQUALS expression
    (37) condition -> . expression LESS expression
    (38) condition -> . expression LESSEQUAL expression
    (39) condition -> . expression GREATER expression
    (40) condition -> . expression GREATEREQUAL expression
    (41) condition -> . expression AND expression
    (42) condition -> . expression OR expression
    (24) expression -> . expression PLUS term
    (25) expression -> . expression MINUS term
    (26) expression -> . term
    (44) expression -> . expression PLUS empty
    (45) expression -> . expression MINUS empty
    (27) term -> . term TIMES factor
    (28) term -> . term DIVIDE factor
    (29) term -> . factor
    (30) factor -> . LPAREN expression RPAREN
    (31) factor -> . NUMBER
    (32) factor -> . FLOAT_NUMBER
    (33) factor -> . IDENTIFIER
    (34) factor -> . BOOL_VALUE

    LPAREN          shift and go to state 34
    NUMBER          shift and go to state 35
    FLOAT_NUMBER    shift and go to state 36
    IDENTIFIER      shift and go to state 37
    BOOL_VALUE      shift and go to state 38

    condition                      shift and go to state 93
    expression                     shift and go to state 47
    term                           shift and go to state 32
    factor                         shift and go to state 33

state 90

    (9) do_until_statement -> DO LBRACE statements RBRACE UNTIL LPAREN . condition RPAREN SEMICOLON
    (35) condition -> . expression EQUALS expression
    (36) condition -> . expression NOTEQUALS expression
    (37) condition -> . expression LESS expression
    (38) condition -> . expression LESSEQUAL expression
    (39) condition -> . expression GREATER expression
    (40) condition -> . expression GREATEREQUAL expression
    (41) condition -> . expression AND expression
    (42) condition -> . expression OR expression
    (24) expression -> . expression PLUS term
    (25) expression -> . expression MINUS term
    (26) expression -> . term
    (44) expression -> . expression PLUS empty
    (45) expression -> . expression MINUS empty
    (27) term -> . term TIMES factor
    (28) term -> . term DIVIDE factor
    (29) term -> . factor
    (30) factor -> . LPAREN expression RPAREN
    (31) factor -> . NUMBER
    (32) factor -> . FLOAT_NUMBER
    (33) factor -> . IDENTIFIER
    (34) factor -> . BOOL_VALUE

    LPAREN          shift and go to state 34
    NUMBER          shift and go to state 35
    FLOAT_NUMBER    shift and go to state 36
    IDENTIFIER      shift and go to state 37
    BOOL_VALUE      shift and go to state 38

    condition                      shift and go to state 94
    expression                     shift and go to state 47
    term                           shift and go to state 32
    factor                         shift and go to state 33

state 91

    (23) while_statement -> WHILE LPAREN condition RPAREN LBRACE statements . RBRACE
    (10) statements -> statements . statement
    (12) statement -> . assignment
    (13) statement -> . if_statement
    (14) statement -> . write_statement
    (15) statement -> . do_statement
    (16) statement -> . while_statement
    (17) statement -> . do_until_statement
    (18) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (19) if_statement -> . IF LPAREN condition RPAREN THEN LBRACE statements RBRACE ELSE LBRACE statements RBRACE FI
    (20) if_statement -> . IF LPAREN condition RPAREN THEN LBRACE statements RBRACE FI
    (21) write_statement -> . WRITE expression SEMICOLON
    (22) do_statement -> . DO LBRACE statements RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (23) while_statement -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (9) do_until_statement -> . DO LBRACE statements RBRACE UNTIL LPAREN condition RPAREN SEMICOLON

    RBRACE          shift and go to state 95
    IDENTIFIER      shift and go to state 20
    IF              shift and go to state 21
    WRITE           shift and go to state 22
    DO              shift and go to state 23
    WHILE           shift and go to state 24

    statement                      shift and go to state 13
    assignment                     shift and go to state 14
    if_statement                   shift and go to state 15
    write_statement                shift and go to state 16
    do_statement                   shift and go to state 17
    while_statement                shift and go to state 18
    do_until_statement             shift and go to state 19

state 92

    (19) if_statement -> IF LPAREN condition RPAREN THEN LBRACE statements . RBRACE ELSE LBRACE statements RBRACE FI
    (20) if_statement -> IF LPAREN condition RPAREN THEN LBRACE statements . RBRACE FI
    (10) statements -> statements . statement
    (12) statement -> . assignment
    (13) statement -> . if_statement
    (14) statement -> . write_statement
    (15) statement -> . do_statement
    (16) statement -> . while_statement
    (17) statement -> . do_until_statement
    (18) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (19) if_statement -> . IF LPAREN condition RPAREN THEN LBRACE statements RBRACE ELSE LBRACE statements RBRACE FI
    (20) if_statement -> . IF LPAREN condition RPAREN THEN LBRACE statements RBRACE FI
    (21) write_statement -> . WRITE expression SEMICOLON
    (22) do_statement -> . DO LBRACE statements RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (23) while_statement -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (9) do_until_statement -> . DO LBRACE statements RBRACE UNTIL LPAREN condition RPAREN SEMICOLON

    RBRACE          shift and go to state 96
    IDENTIFIER      shift and go to state 20
    IF              shift and go to state 21
    WRITE           shift and go to state 22
    DO              shift and go to state 23
    WHILE           shift and go to state 24

    statement                      shift and go to state 13
    assignment                     shift and go to state 14
    if_statement                   shift and go to state 15
    write_statement                shift and go to state 16
    do_statement                   shift and go to state 17
    while_statement                shift and go to state 18
    do_until_statement             shift and go to state 19

state 93

    (22) do_statement -> DO LBRACE statements RBRACE WHILE LPAREN condition . RPAREN SEMICOLON

    RPAREN          shift and go to state 97


state 94

    (9) do_until_statement -> DO LBRACE statements RBRACE UNTIL LPAREN condition . RPAREN SEMICOLON

    RPAREN          shift and go to state 98


state 95

    (23) while_statement -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .

    RBRACE          reduce using rule 23 (while_statement -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    IDENTIFIER      reduce using rule 23 (while_statement -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    IF              reduce using rule 23 (while_statement -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    WRITE           reduce using rule 23 (while_statement -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    DO              reduce using rule 23 (while_statement -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 23 (while_statement -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)


state 96

    (19) if_statement -> IF LPAREN condition RPAREN THEN LBRACE statements RBRACE . ELSE LBRACE statements RBRACE FI
    (20) if_statement -> IF LPAREN condition RPAREN THEN LBRACE statements RBRACE . FI

    ELSE            shift and go to state 99
    FI              shift and go to state 100


state 97

    (22) do_statement -> DO LBRACE statements RBRACE WHILE LPAREN condition RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 101


state 98

    (9) do_until_statement -> DO LBRACE statements RBRACE UNTIL LPAREN condition RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 102


state 99

    (19) if_statement -> IF LPAREN condition RPAREN THEN LBRACE statements RBRACE ELSE . LBRACE statements RBRACE FI

    LBRACE          shift and go to state 103


state 100

    (20) if_statement -> IF LPAREN condition RPAREN THEN LBRACE statements RBRACE FI .

    RBRACE          reduce using rule 20 (if_statement -> IF LPAREN condition RPAREN THEN LBRACE statements RBRACE FI .)
    IDENTIFIER      reduce using rule 20 (if_statement -> IF LPAREN condition RPAREN THEN LBRACE statements RBRACE FI .)
    IF              reduce using rule 20 (if_statement -> IF LPAREN condition RPAREN THEN LBRACE statements RBRACE FI .)
    WRITE           reduce using rule 20 (if_statement -> IF LPAREN condition RPAREN THEN LBRACE statements RBRACE FI .)
    DO              reduce using rule 20 (if_statement -> IF LPAREN condition RPAREN THEN LBRACE statements RBRACE FI .)
    WHILE           reduce using rule 20 (if_statement -> IF LPAREN condition RPAREN THEN LBRACE statements RBRACE FI .)


state 101

    (22) do_statement -> DO LBRACE statements RBRACE WHILE LPAREN condition RPAREN SEMICOLON .

    RBRACE          reduce using rule 22 (do_statement -> DO LBRACE statements RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 22 (do_statement -> DO LBRACE statements RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    IF              reduce using rule 22 (do_statement -> DO LBRACE statements RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    WRITE           reduce using rule 22 (do_statement -> DO LBRACE statements RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    DO              reduce using rule 22 (do_statement -> DO LBRACE statements RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)
    WHILE           reduce using rule 22 (do_statement -> DO LBRACE statements RBRACE WHILE LPAREN condition RPAREN SEMICOLON .)


state 102

    (9) do_until_statement -> DO LBRACE statements RBRACE UNTIL LPAREN condition RPAREN SEMICOLON .

    RBRACE          reduce using rule 9 (do_until_statement -> DO LBRACE statements RBRACE UNTIL LPAREN condition RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 9 (do_until_statement -> DO LBRACE statements RBRACE UNTIL LPAREN condition RPAREN SEMICOLON .)
    IF              reduce using rule 9 (do_until_statement -> DO LBRACE statements RBRACE UNTIL LPAREN condition RPAREN SEMICOLON .)
    WRITE           reduce using rule 9 (do_until_statement -> DO LBRACE statements RBRACE UNTIL LPAREN condition RPAREN SEMICOLON .)
    DO              reduce using rule 9 (do_until_statement -> DO LBRACE statements RBRACE UNTIL LPAREN condition RPAREN SEMICOLON .)
    WHILE           reduce using rule 9 (do_until_statement -> DO LBRACE statements RBRACE UNTIL LPAREN condition RPAREN SEMICOLON .)


state 103

    (19) if_statement -> IF LPAREN condition RPAREN THEN LBRACE statements RBRACE ELSE LBRACE . statements RBRACE FI
    (10) statements -> . statements statement
    (11) statements -> . empty
    (43) empty -> .

    RBRACE          reduce using rule 43 (empty -> .)
    IDENTIFIER      reduce using rule 43 (empty -> .)
    IF              reduce using rule 43 (empty -> .)
    WRITE           reduce using rule 43 (empty -> .)
    DO              reduce using rule 43 (empty -> .)
    WHILE           reduce using rule 43 (empty -> .)

    statements                     shift and go to state 104
    empty                          shift and go to state 8

state 104

    (19) if_statement -> IF LPAREN condition RPAREN THEN LBRACE statements RBRACE ELSE LBRACE statements . RBRACE FI
    (10) statements -> statements . statement
    (12) statement -> . assignment
    (13) statement -> . if_statement
    (14) statement -> . write_statement
    (15) statement -> . do_statement
    (16) statement -> . while_statement
    (17) statement -> . do_until_statement
    (18) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (19) if_statement -> . IF LPAREN condition RPAREN THEN LBRACE statements RBRACE ELSE LBRACE statements RBRACE FI
    (20) if_statement -> . IF LPAREN condition RPAREN THEN LBRACE statements RBRACE FI
    (21) write_statement -> . WRITE expression SEMICOLON
    (22) do_statement -> . DO LBRACE statements RBRACE WHILE LPAREN condition RPAREN SEMICOLON
    (23) while_statement -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (9) do_until_statement -> . DO LBRACE statements RBRACE UNTIL LPAREN condition RPAREN SEMICOLON

    RBRACE          shift and go to state 105
    IDENTIFIER      shift and go to state 20
    IF              shift and go to state 21
    WRITE           shift and go to state 22
    DO              shift and go to state 23
    WHILE           shift and go to state 24

    statement                      shift and go to state 13
    assignment                     shift and go to state 14
    if_statement                   shift and go to state 15
    write_statement                shift and go to state 16
    do_statement                   shift and go to state 17
    while_statement                shift and go to state 18
    do_until_statement             shift and go to state 19

state 105

    (19) if_statement -> IF LPAREN condition RPAREN THEN LBRACE statements RBRACE ELSE LBRACE statements RBRACE . FI

    FI              shift and go to state 106


state 106

    (19) if_statement -> IF LPAREN condition RPAREN THEN LBRACE statements RBRACE ELSE LBRACE statements RBRACE FI .

    RBRACE          reduce using rule 19 (if_statement -> IF LPAREN condition RPAREN THEN LBRACE statements RBRACE ELSE LBRACE statements RBRACE FI .)
    IDENTIFIER      reduce using rule 19 (if_statement -> IF LPAREN condition RPAREN THEN LBRACE statements RBRACE ELSE LBRACE statements RBRACE FI .)
    IF              reduce using rule 19 (if_statement -> IF LPAREN condition RPAREN THEN LBRACE statements RBRACE ELSE LBRACE statements RBRACE FI .)
    WRITE           reduce using rule 19 (if_statement -> IF LPAREN condition RPAREN THEN LBRACE statements RBRACE ELSE LBRACE statements RBRACE FI .)
    DO              reduce using rule 19 (if_statement -> IF LPAREN condition RPAREN THEN LBRACE statements RBRACE ELSE LBRACE statements RBRACE FI .)
    WHILE           reduce using rule 19 (if_statement -> IF LPAREN condition RPAREN THEN LBRACE statements RBRACE ELSE LBRACE statements RBRACE FI .)

